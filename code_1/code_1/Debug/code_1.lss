
code_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d0  00800060  000014c4  00001558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800230  00800230  00001728  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e5f  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000833  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e7e  00000000  00000000  00003f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00004d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014d9  00000000  00000000  000055dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00006ab6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 34       	cpi	r26, 0x4F	; 79
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 07 	call	0xf50	; 0xf50 <main>
      8a:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_Init>:
			_delay_ms(30);
			
			return diameter;
		}
	}
}
      92:	90 bd       	out	0x20, r25	; 32
      94:	89 b9       	out	0x09, r24	; 9
      96:	88 e1       	ldi	r24, 0x18	; 24
      98:	8a b9       	out	0x0a, r24	; 10
      9a:	8e e8       	ldi	r24, 0x8E	; 142
      9c:	80 bd       	out	0x20, r24	; 32
      9e:	08 95       	ret

000000a0 <USART_Transmit>:
      a0:	5d 9b       	sbis	0x0b, 5	; 11
      a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_Transmit>
      a4:	8c b9       	out	0x0c, r24	; 12
      a6:	08 95       	ret

000000a8 <lcdcmd>:
      a8:	98 e0       	ldi	r25, 0x08	; 8
      aa:	94 bb       	out	0x14, r25	; 20
      ac:	92 b3       	in	r25, 0x12	; 18
      ae:	9f 73       	andi	r25, 0x3F	; 63
      b0:	92 bb       	out	0x12, r25	; 18
      b2:	92 b3       	in	r25, 0x12	; 18
      b4:	91 7f       	andi	r25, 0xF1	; 241
      b6:	92 bb       	out	0x12, r25	; 18
      b8:	98 2f       	mov	r25, r24
      ba:	90 7f       	andi	r25, 0xF0	; 240
      bc:	95 bb       	out	0x15, r25	; 21
      be:	92 b3       	in	r25, 0x12	; 18
      c0:	90 68       	ori	r25, 0x80	; 128
      c2:	92 bb       	out	0x12, r25	; 18
      c4:	ef e9       	ldi	r30, 0x9F	; 159
      c6:	ff e0       	ldi	r31, 0x0F	; 15
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <lcdcmd+0x20>
      cc:	00 c0       	rjmp	.+0      	; 0xce <lcdcmd+0x26>
      ce:	00 00       	nop
      d0:	92 b3       	in	r25, 0x12	; 18
      d2:	9f 77       	andi	r25, 0x7F	; 127
      d4:	92 bb       	out	0x12, r25	; 18
      d6:	82 95       	swap	r24
      d8:	80 7f       	andi	r24, 0xF0	; 240
      da:	85 bb       	out	0x15, r24	; 21
      dc:	82 b3       	in	r24, 0x12	; 18
      de:	80 68       	ori	r24, 0x80	; 128
      e0:	82 bb       	out	0x12, r24	; 18
      e2:	8f e9       	ldi	r24, 0x9F	; 159
      e4:	9f e0       	ldi	r25, 0x0F	; 15
      e6:	01 97       	sbiw	r24, 0x01	; 1
      e8:	f1 f7       	brne	.-4      	; 0xe6 <lcdcmd+0x3e>
      ea:	00 c0       	rjmp	.+0      	; 0xec <lcdcmd+0x44>
      ec:	00 00       	nop
      ee:	82 b3       	in	r24, 0x12	; 18
      f0:	8f 77       	andi	r24, 0x7F	; 127
      f2:	82 bb       	out	0x12, r24	; 18
      f4:	08 95       	ret

000000f6 <lcddata>:
      f6:	92 b3       	in	r25, 0x12	; 18
      f8:	90 6c       	ori	r25, 0xC0	; 192
      fa:	92 bb       	out	0x12, r25	; 18
      fc:	92 b3       	in	r25, 0x12	; 18
      fe:	91 7f       	andi	r25, 0xF1	; 241
     100:	92 bb       	out	0x12, r25	; 18
     102:	98 2f       	mov	r25, r24
     104:	90 7f       	andi	r25, 0xF0	; 240
     106:	95 bb       	out	0x15, r25	; 21
     108:	92 b3       	in	r25, 0x12	; 18
     10a:	90 68       	ori	r25, 0x80	; 128
     10c:	92 bb       	out	0x12, r25	; 18
     10e:	ef e9       	ldi	r30, 0x9F	; 159
     110:	ff e0       	ldi	r31, 0x0F	; 15
     112:	31 97       	sbiw	r30, 0x01	; 1
     114:	f1 f7       	brne	.-4      	; 0x112 <lcddata+0x1c>
     116:	00 c0       	rjmp	.+0      	; 0x118 <lcddata+0x22>
     118:	00 00       	nop
     11a:	92 b3       	in	r25, 0x12	; 18
     11c:	9f 77       	andi	r25, 0x7F	; 127
     11e:	92 bb       	out	0x12, r25	; 18
     120:	82 95       	swap	r24
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	85 bb       	out	0x15, r24	; 21
     126:	82 b3       	in	r24, 0x12	; 18
     128:	80 68       	ori	r24, 0x80	; 128
     12a:	82 bb       	out	0x12, r24	; 18
     12c:	8f e9       	ldi	r24, 0x9F	; 159
     12e:	9f e0       	ldi	r25, 0x0F	; 15
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcddata+0x3a>
     134:	00 c0       	rjmp	.+0      	; 0x136 <lcddata+0x40>
     136:	00 00       	nop
     138:	82 b3       	in	r24, 0x12	; 18
     13a:	8f 77       	andi	r24, 0x7F	; 127
     13c:	82 bb       	out	0x12, r24	; 18
     13e:	08 95       	ret

00000140 <lcd_int>:
     140:	80 ef       	ldi	r24, 0xF0	; 240
     142:	84 bb       	out	0x14, r24	; 20
     144:	81 b3       	in	r24, 0x11	; 17
     146:	80 68       	ori	r24, 0x80	; 128
     148:	81 bb       	out	0x11, r24	; 17
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	81 bb       	out	0x11, r24	; 17
     14e:	82 b3       	in	r24, 0x12	; 18
     150:	8f 77       	andi	r24, 0x7F	; 127
     152:	82 bb       	out	0x12, r24	; 18
     154:	83 e3       	ldi	r24, 0x33	; 51
     156:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     15a:	82 e3       	ldi	r24, 0x32	; 50
     15c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     160:	88 e2       	ldi	r24, 0x28	; 40
     162:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     166:	8e e0       	ldi	r24, 0x0E	; 14
     168:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     172:	8f e3       	ldi	r24, 0x3F	; 63
     174:	9f e1       	ldi	r25, 0x1F	; 31
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <lcd_int+0x36>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_int+0x3c>
     17c:	00 00       	nop
     17e:	08 95       	ret

00000180 <lcd_Print>:
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	8c 01       	movw	r16, r24
     18a:	c0 e0       	ldi	r28, 0x00	; 0
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	03 c0       	rjmp	.+6      	; 0x196 <lcd_Print+0x16>
     190:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcddata>
     194:	21 96       	adiw	r28, 0x01	; 1
     196:	f8 01       	movw	r30, r16
     198:	ec 0f       	add	r30, r28
     19a:	fd 1f       	adc	r31, r29
     19c:	80 81       	ld	r24, Z
     19e:	81 11       	cpse	r24, r1
     1a0:	f7 cf       	rjmp	.-18     	; 0x190 <lcd_Print+0x10>
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	08 95       	ret

000001ac <LCD_Clear>:
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     1b2:	8f e3       	ldi	r24, 0x3F	; 63
     1b4:	9f e1       	ldi	r25, 0x1F	; 31
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_Clear+0xa>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_Clear+0x10>
     1bc:	00 00       	nop
     1be:	80 e8       	ldi	r24, 0x80	; 128
     1c0:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     1c4:	08 95       	ret

000001c6 <keypad>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
     1ce:	68 97       	sbiw	r28, 0x18	; 24
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	cd bf       	out	0x3d, r28	; 61
     1da:	88 e0       	ldi	r24, 0x08	; 8
     1dc:	e8 e5       	ldi	r30, 0x58	; 88
     1de:	f1 e0       	ldi	r31, 0x01	; 1
     1e0:	de 01       	movw	r26, r28
     1e2:	11 96       	adiw	r26, 0x01	; 1
     1e4:	01 90       	ld	r0, Z+
     1e6:	0d 92       	st	X+, r0
     1e8:	8a 95       	dec	r24
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <keypad+0x1e>
     1ec:	80 e1       	ldi	r24, 0x10	; 16
     1ee:	e0 e6       	ldi	r30, 0x60	; 96
     1f0:	f1 e0       	ldi	r31, 0x01	; 1
     1f2:	de 01       	movw	r26, r28
     1f4:	19 96       	adiw	r26, 0x09	; 9
     1f6:	01 90       	ld	r0, Z+
     1f8:	0d 92       	st	X+, r0
     1fa:	8a 95       	dec	r24
     1fc:	e1 f7       	brne	.-8      	; 0x1f6 <keypad+0x30>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	80 c0       	rjmp	.+256    	; 0x304 <keypad+0x13e>
     204:	fc 01       	movw	r30, r24
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	2c 0f       	add	r18, r28
     210:	3d 1f       	adc	r19, r29
     212:	e2 0f       	add	r30, r18
     214:	f3 1f       	adc	r31, r19
     216:	20 81       	ld	r18, Z
     218:	28 bb       	out	0x18, r18	; 24
     21a:	b4 99       	sbic	0x16, 4	; 22
     21c:	18 c0       	rjmp	.+48     	; 0x24e <keypad+0x88>
     21e:	ef e7       	ldi	r30, 0x7F	; 127
     220:	fb eb       	ldi	r31, 0xBB	; 187
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <keypad+0x5c>
     226:	00 c0       	rjmp	.+0      	; 0x228 <keypad+0x62>
     228:	00 00       	nop
     22a:	83 30       	cpi	r24, 0x03	; 3
     22c:	91 05       	cpc	r25, r1
     22e:	19 f4       	brne	.+6      	; 0x236 <keypad+0x70>
     230:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
     234:	6b c0       	rjmp	.+214    	; 0x30c <keypad+0x146>
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	e1 e0       	ldi	r30, 0x01	; 1
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ec 0f       	add	r30, r28
     244:	fd 1f       	adc	r31, r29
     246:	e8 0f       	add	r30, r24
     248:	f9 1f       	adc	r31, r25
     24a:	80 85       	ldd	r24, Z+8	; 0x08
     24c:	5f c0       	rjmp	.+190    	; 0x30c <keypad+0x146>
     24e:	b5 99       	sbic	0x16, 5	; 22
     250:	12 c0       	rjmp	.+36     	; 0x276 <keypad+0xb0>
     252:	ef e7       	ldi	r30, 0x7F	; 127
     254:	fb eb       	ldi	r31, 0xBB	; 187
     256:	31 97       	sbiw	r30, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <keypad+0x90>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <keypad+0x96>
     25c:	00 00       	nop
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	e1 e0       	ldi	r30, 0x01	; 1
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ec 0f       	add	r30, r28
     26c:	fd 1f       	adc	r31, r29
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	81 85       	ldd	r24, Z+9	; 0x09
     274:	4b c0       	rjmp	.+150    	; 0x30c <keypad+0x146>
     276:	b6 99       	sbic	0x16, 6	; 22
     278:	19 c0       	rjmp	.+50     	; 0x2ac <keypad+0xe6>
     27a:	ef e7       	ldi	r30, 0x7F	; 127
     27c:	fb eb       	ldi	r31, 0xBB	; 187
     27e:	31 97       	sbiw	r30, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <keypad+0xb8>
     282:	00 c0       	rjmp	.+0      	; 0x284 <keypad+0xbe>
     284:	00 00       	nop
     286:	83 30       	cpi	r24, 0x03	; 3
     288:	91 05       	cpc	r25, r1
     28a:	21 f4       	brne	.+8      	; 0x294 <keypad+0xce>
     28c:	80 e1       	ldi	r24, 0x10	; 16
     28e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     292:	3c c0       	rjmp	.+120    	; 0x30c <keypad+0x146>
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	88 0f       	add	r24, r24
     29a:	99 1f       	adc	r25, r25
     29c:	e1 e0       	ldi	r30, 0x01	; 1
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ec 0f       	add	r30, r28
     2a2:	fd 1f       	adc	r31, r29
     2a4:	e8 0f       	add	r30, r24
     2a6:	f9 1f       	adc	r31, r25
     2a8:	82 85       	ldd	r24, Z+10	; 0x0a
     2aa:	30 c0       	rjmp	.+96     	; 0x30c <keypad+0x146>
     2ac:	b7 99       	sbic	0x16, 7	; 22
     2ae:	29 c0       	rjmp	.+82     	; 0x302 <keypad+0x13c>
     2b0:	ef e7       	ldi	r30, 0x7F	; 127
     2b2:	fb eb       	ldi	r31, 0xBB	; 187
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <keypad+0xee>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <keypad+0xf4>
     2ba:	00 00       	nop
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	21 f4       	brne	.+8      	; 0x2c8 <keypad+0x102>
     2c0:	80 e8       	ldi	r24, 0x80	; 128
     2c2:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     2c6:	22 c0       	rjmp	.+68     	; 0x30c <keypad+0x146>
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	91 05       	cpc	r25, r1
     2cc:	21 f4       	brne	.+8      	; 0x2d6 <keypad+0x110>
     2ce:	80 ec       	ldi	r24, 0xC0	; 192
     2d0:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     2d4:	1b c0       	rjmp	.+54     	; 0x30c <keypad+0x146>
     2d6:	82 30       	cpi	r24, 0x02	; 2
     2d8:	91 05       	cpc	r25, r1
     2da:	61 f4       	brne	.+24     	; 0x2f4 <keypad+0x12e>
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	e1 e0       	ldi	r30, 0x01	; 1
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ec 0f       	add	r30, r28
     2ea:	fd 1f       	adc	r31, r29
     2ec:	e8 0f       	add	r30, r24
     2ee:	f9 1f       	adc	r31, r25
     2f0:	83 85       	ldd	r24, Z+11	; 0x0b
     2f2:	0c c0       	rjmp	.+24     	; 0x30c <keypad+0x146>
     2f4:	83 30       	cpi	r24, 0x03	; 3
     2f6:	91 05       	cpc	r25, r1
     2f8:	21 f4       	brne	.+8      	; 0x302 <keypad+0x13c>
     2fa:	84 e1       	ldi	r24, 0x14	; 20
     2fc:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
     300:	05 c0       	rjmp	.+10     	; 0x30c <keypad+0x146>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	91 05       	cpc	r25, r1
     308:	0c f4       	brge	.+2      	; 0x30c <keypad+0x146>
     30a:	7c cf       	rjmp	.-264    	; 0x204 <keypad+0x3e>
     30c:	68 96       	adiw	r28, 0x18	; 24
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <lcd_write>:
     31e:	cf 93       	push	r28
     320:	80 ef       	ldi	r24, 0xF0	; 240
     322:	88 bb       	out	0x18, r24	; 24
     324:	86 b3       	in	r24, 0x16	; 22
     326:	80 3f       	cpi	r24, 0xF0	; 240
     328:	d9 f3       	breq	.-10     	; 0x320 <lcd_write+0x2>
     32a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <keypad>
     32e:	c8 2f       	mov	r28, r24
     330:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcddata>
     334:	c1 36       	cpi	r28, 0x61	; 97
     336:	a1 f3       	breq	.-24     	; 0x320 <lcd_write+0x2>
     338:	8c 2f       	mov	r24, r28
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <loadCellRead>:
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <hx711H>
     34a:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <hx711L+0x1>
     34e:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <hx711L>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	33 c0       	rjmp	.+102    	; 0x3bc <loadCellRead+0x7e>
     356:	92 b3       	in	r25, 0x12	; 18
     358:	90 62       	ori	r25, 0x20	; 32
     35a:	92 bb       	out	0x12, r25	; 18
     35c:	95 e3       	ldi	r25, 0x35	; 53
     35e:	9a 95       	dec	r25
     360:	f1 f7       	brne	.-4      	; 0x35e <loadCellRead+0x20>
     362:	00 00       	nop
     364:	84 9b       	sbis	0x10, 4	; 16
     366:	11 c0       	rjmp	.+34     	; 0x38a <loadCellRead+0x4c>
     368:	47 e0       	ldi	r20, 0x07	; 7
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	48 1b       	sub	r20, r24
     36e:	51 09       	sbc	r21, r1
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	02 c0       	rjmp	.+4      	; 0x37a <loadCellRead+0x3c>
     376:	22 0f       	add	r18, r18
     378:	33 1f       	adc	r19, r19
     37a:	4a 95       	dec	r20
     37c:	e2 f7       	brpl	.-8      	; 0x376 <loadCellRead+0x38>
     37e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <hx711H>
     382:	29 2b       	or	r18, r25
     384:	20 93 39 02 	sts	0x0239, r18	; 0x800239 <hx711H>
     388:	11 c0       	rjmp	.+34     	; 0x3ac <loadCellRead+0x6e>
     38a:	47 e0       	ldi	r20, 0x07	; 7
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	48 1b       	sub	r20, r24
     390:	51 09       	sbc	r21, r1
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <loadCellRead+0x5e>
     398:	22 0f       	add	r18, r18
     39a:	33 1f       	adc	r19, r19
     39c:	4a 95       	dec	r20
     39e:	e2 f7       	brpl	.-8      	; 0x398 <loadCellRead+0x5a>
     3a0:	20 95       	com	r18
     3a2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <hx711H>
     3a6:	29 23       	and	r18, r25
     3a8:	20 93 39 02 	sts	0x0239, r18	; 0x800239 <hx711H>
     3ac:	92 b3       	in	r25, 0x12	; 18
     3ae:	9f 7d       	andi	r25, 0xDF	; 223
     3b0:	92 bb       	out	0x12, r25	; 18
     3b2:	9a e1       	ldi	r25, 0x1A	; 26
     3b4:	9a 95       	dec	r25
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <loadCellRead+0x76>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <loadCellRead+0x7c>
     3ba:	8f 5f       	subi	r24, 0xFF	; 255
     3bc:	88 30       	cpi	r24, 0x08	; 8
     3be:	58 f2       	brcs	.-106    	; 0x356 <loadCellRead+0x18>
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	3e c0       	rjmp	.+124    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     3c4:	92 b3       	in	r25, 0x12	; 18
     3c6:	90 62       	ori	r25, 0x20	; 32
     3c8:	92 bb       	out	0x12, r25	; 18
     3ca:	95 e3       	ldi	r25, 0x35	; 53
     3cc:	9a 95       	dec	r25
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <loadCellRead+0x8e>
     3d0:	00 00       	nop
     3d2:	84 9b       	sbis	0x10, 4	; 16
     3d4:	16 c0       	rjmp	.+44     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3d6:	4f e0       	ldi	r20, 0x0F	; 15
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	48 1b       	sub	r20, r24
     3dc:	51 09       	sbc	r21, r1
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <loadCellRead+0xaa>
     3e4:	22 0f       	add	r18, r18
     3e6:	33 1f       	adc	r19, r19
     3e8:	4a 95       	dec	r20
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <loadCellRead+0xa6>
     3ec:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <hx711L>
     3f0:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <hx711L+0x1>
     3f4:	24 2b       	or	r18, r20
     3f6:	35 2b       	or	r19, r21
     3f8:	30 93 38 02 	sts	0x0238, r19	; 0x800238 <hx711L+0x1>
     3fc:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <hx711L>
     400:	17 c0       	rjmp	.+46     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     402:	4f e0       	ldi	r20, 0x0F	; 15
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	48 1b       	sub	r20, r24
     408:	51 09       	sbc	r21, r1
     40a:	21 e0       	ldi	r18, 0x01	; 1
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	4a 95       	dec	r20
     416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     418:	20 95       	com	r18
     41a:	30 95       	com	r19
     41c:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <hx711L>
     420:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <hx711L+0x1>
     424:	24 23       	and	r18, r20
     426:	35 23       	and	r19, r21
     428:	30 93 38 02 	sts	0x0238, r19	; 0x800238 <hx711L+0x1>
     42c:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <hx711L>
     430:	92 b3       	in	r25, 0x12	; 18
     432:	9f 7d       	andi	r25, 0xDF	; 223
     434:	92 bb       	out	0x12, r25	; 18
     436:	9a e1       	ldi	r25, 0x1A	; 26
     438:	9a 95       	dec	r25
     43a:	f1 f7       	brne	.-4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	80 31       	cpi	r24, 0x10	; 16
     442:	08 f4       	brcc	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	bf cf       	rjmp	.-130    	; 0x3c4 <loadCellRead+0x86>
     446:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <hx711L>
     44a:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <hx711L+0x1>
     44e:	96 95       	lsr	r25
     450:	87 95       	ror	r24
     452:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <hx711L+0x1>
     456:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <hx711L>
     45a:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <hx711H>
     45e:	60 ff       	sbrs	r22, 0
     460:	05 c0       	rjmp	.+10     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     462:	90 68       	ori	r25, 0x80	; 128
     464:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <hx711L+0x1>
     468:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <hx711L>
     46c:	66 95       	lsr	r22
     46e:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <hx711H>
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     47c:	24 e6       	ldi	r18, 0x64	; 100
     47e:	32 ea       	ldi	r19, 0xA2	; 162
     480:	48 e6       	ldi	r20, 0x68	; 104
     482:	50 e4       	ldi	r21, 0x40	; 64
     484:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     488:	6b 01       	movw	r12, r22
     48a:	7c 01       	movw	r14, r24
     48c:	60 91 37 02 	lds	r22, 0x0237	; 0x800237 <hx711L>
     490:	70 91 38 02 	lds	r23, 0x0238	; 0x800238 <hx711L+0x1>
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 07 09 	call	0x120e	; 0x120e <__floatunsisf>
     49c:	23 e3       	ldi	r18, 0x33	; 51
     49e:	3b ed       	ldi	r19, 0xDB	; 219
     4a0:	4c e8       	ldi	r20, 0x8C	; 140
     4a2:	56 e4       	ldi	r21, 0x46	; 70
     4a4:	0e 94 5f 08 	call	0x10be	; 0x10be <__divsf3>
     4a8:	9b 01       	movw	r18, r22
     4aa:	ac 01       	movw	r20, r24
     4ac:	c7 01       	movw	r24, r14
     4ae:	b6 01       	movw	r22, r12
     4b0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <loadCellReadStick>:
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <hx711H2>
     4ca:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <hx711L2+0x1>
     4ce:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <hx711L2>
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	33 c0       	rjmp	.+102    	; 0x53c <loadCellReadStick+0x7e>
     4d6:	9b b3       	in	r25, 0x1b	; 27
     4d8:	94 60       	ori	r25, 0x04	; 4
     4da:	9b bb       	out	0x1b, r25	; 27
     4dc:	95 e3       	ldi	r25, 0x35	; 53
     4de:	9a 95       	dec	r25
     4e0:	f1 f7       	brne	.-4      	; 0x4de <loadCellReadStick+0x20>
     4e2:	00 00       	nop
     4e4:	c8 9b       	sbis	0x19, 0	; 25
     4e6:	11 c0       	rjmp	.+34     	; 0x50a <loadCellReadStick+0x4c>
     4e8:	47 e0       	ldi	r20, 0x07	; 7
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	48 1b       	sub	r20, r24
     4ee:	51 09       	sbc	r21, r1
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <loadCellReadStick+0x3c>
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	4a 95       	dec	r20
     4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <loadCellReadStick+0x38>
     4fe:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <hx711H2>
     502:	29 2b       	or	r18, r25
     504:	20 93 36 02 	sts	0x0236, r18	; 0x800236 <hx711H2>
     508:	11 c0       	rjmp	.+34     	; 0x52c <loadCellReadStick+0x6e>
     50a:	47 e0       	ldi	r20, 0x07	; 7
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	48 1b       	sub	r20, r24
     510:	51 09       	sbc	r21, r1
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	02 c0       	rjmp	.+4      	; 0x51c <loadCellReadStick+0x5e>
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	4a 95       	dec	r20
     51e:	e2 f7       	brpl	.-8      	; 0x518 <loadCellReadStick+0x5a>
     520:	20 95       	com	r18
     522:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <hx711H2>
     526:	29 23       	and	r18, r25
     528:	20 93 36 02 	sts	0x0236, r18	; 0x800236 <hx711H2>
     52c:	9b b3       	in	r25, 0x1b	; 27
     52e:	9b 7f       	andi	r25, 0xFB	; 251
     530:	9b bb       	out	0x1b, r25	; 27
     532:	9a e1       	ldi	r25, 0x1A	; 26
     534:	9a 95       	dec	r25
     536:	f1 f7       	brne	.-4      	; 0x534 <loadCellReadStick+0x76>
     538:	00 c0       	rjmp	.+0      	; 0x53a <loadCellReadStick+0x7c>
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	88 30       	cpi	r24, 0x08	; 8
     53e:	58 f2       	brcs	.-106    	; 0x4d6 <loadCellReadStick+0x18>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	3e c0       	rjmp	.+124    	; 0x5c0 <loadCellReadStick+0x102>
     544:	9b b3       	in	r25, 0x1b	; 27
     546:	94 60       	ori	r25, 0x04	; 4
     548:	9b bb       	out	0x1b, r25	; 27
     54a:	95 e3       	ldi	r25, 0x35	; 53
     54c:	9a 95       	dec	r25
     54e:	f1 f7       	brne	.-4      	; 0x54c <loadCellReadStick+0x8e>
     550:	00 00       	nop
     552:	c8 9b       	sbis	0x19, 0	; 25
     554:	16 c0       	rjmp	.+44     	; 0x582 <loadCellReadStick+0xc4>
     556:	4f e0       	ldi	r20, 0x0F	; 15
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	48 1b       	sub	r20, r24
     55c:	51 09       	sbc	r21, r1
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <loadCellReadStick+0xaa>
     564:	22 0f       	add	r18, r18
     566:	33 1f       	adc	r19, r19
     568:	4a 95       	dec	r20
     56a:	e2 f7       	brpl	.-8      	; 0x564 <loadCellReadStick+0xa6>
     56c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <hx711L2>
     570:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <hx711L2+0x1>
     574:	24 2b       	or	r18, r20
     576:	35 2b       	or	r19, r21
     578:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <hx711L2+0x1>
     57c:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <hx711L2>
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <loadCellReadStick+0xf2>
     582:	4f e0       	ldi	r20, 0x0F	; 15
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	48 1b       	sub	r20, r24
     588:	51 09       	sbc	r21, r1
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	02 c0       	rjmp	.+4      	; 0x594 <loadCellReadStick+0xd6>
     590:	22 0f       	add	r18, r18
     592:	33 1f       	adc	r19, r19
     594:	4a 95       	dec	r20
     596:	e2 f7       	brpl	.-8      	; 0x590 <loadCellReadStick+0xd2>
     598:	20 95       	com	r18
     59a:	30 95       	com	r19
     59c:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <hx711L2>
     5a0:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <hx711L2+0x1>
     5a4:	24 23       	and	r18, r20
     5a6:	35 23       	and	r19, r21
     5a8:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <hx711L2+0x1>
     5ac:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <hx711L2>
     5b0:	9b b3       	in	r25, 0x1b	; 27
     5b2:	9b 7f       	andi	r25, 0xFB	; 251
     5b4:	9b bb       	out	0x1b, r25	; 27
     5b6:	9a e1       	ldi	r25, 0x1A	; 26
     5b8:	9a 95       	dec	r25
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <loadCellReadStick+0xfa>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <loadCellReadStick+0x100>
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	80 31       	cpi	r24, 0x10	; 16
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <loadCellReadStick+0x108>
     5c4:	bf cf       	rjmp	.-130    	; 0x544 <loadCellReadStick+0x86>
     5c6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <hx711L2>
     5ca:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <hx711L2+0x1>
     5ce:	96 95       	lsr	r25
     5d0:	87 95       	ror	r24
     5d2:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <hx711L2+0x1>
     5d6:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <hx711L2>
     5da:	60 91 36 02 	lds	r22, 0x0236	; 0x800236 <hx711H2>
     5de:	60 ff       	sbrs	r22, 0
     5e0:	05 c0       	rjmp	.+10     	; 0x5ec <loadCellReadStick+0x12e>
     5e2:	90 68       	ori	r25, 0x80	; 128
     5e4:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <hx711L2+0x1>
     5e8:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <hx711L2>
     5ec:	66 95       	lsr	r22
     5ee:	60 93 36 02 	sts	0x0236, r22	; 0x800236 <hx711H2>
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     5fc:	24 e6       	ldi	r18, 0x64	; 100
     5fe:	32 ea       	ldi	r19, 0xA2	; 162
     600:	48 e6       	ldi	r20, 0x68	; 104
     602:	50 e4       	ldi	r21, 0x40	; 64
     604:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     608:	6b 01       	movw	r12, r22
     60a:	7c 01       	movw	r14, r24
     60c:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <hx711L2>
     610:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <hx711L2+0x1>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 07 09 	call	0x120e	; 0x120e <__floatunsisf>
     61c:	23 e3       	ldi	r18, 0x33	; 51
     61e:	3b ed       	ldi	r19, 0xDB	; 219
     620:	4c e8       	ldi	r20, 0x8C	; 140
     622:	56 e4       	ldi	r21, 0x46	; 70
     624:	0e 94 5f 08 	call	0x10be	; 0x10be <__divsf3>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	c7 01       	movw	r24, r14
     62e:	b6 01       	movw	r22, r12
     630:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	08 95       	ret

0000063e <HCSR04Init2>:


void HCSR04Init2()
{
	
	US_DDR2|=(1<<US_TRIG_POS2); //PC0
     63e:	81 b3       	in	r24, 0x11	; 17
     640:	84 60       	ori	r24, 0x04	; 4
     642:	81 bb       	out	0x11, r24	; 17
     644:	08 95       	ret

00000646 <HCSR04Trigger2>:
}

void HCSR04Trigger2()
{
	
	US_PORT2|=(1<<US_TRIG_POS2); //PC0   //high
     646:	82 b3       	in	r24, 0x12	; 18
     648:	84 60       	ori	r24, 0x04	; 4
     64a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     64c:	80 e5       	ldi	r24, 0x50	; 80
     64e:	8a 95       	dec	r24
     650:	f1 f7       	brne	.-4      	; 0x64e <HCSR04Trigger2+0x8>
	
	_delay_us(15);
	
	US_PORT2&=~(1<<US_TRIG_POS2);	//PC0	//low
     652:	82 b3       	in	r24, 0x12	; 18
     654:	8b 7f       	andi	r24, 0xFB	; 251
     656:	82 bb       	out	0x12, r24	; 18
     658:	08 95       	ret

0000065a <GetPulseWidth2>:
uint16_t GetPulseWidth2()
{
	
	uint32_t i,result;

	for(i=0;i<600000;i++)
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	dc 01       	movw	r26, r24
     660:	05 c0       	rjmp	.+10     	; 0x66c <GetPulseWidth2+0x12>
	{
		if(!(US_PIN2 & (1<<US_ECHO_POS2)))	//PC1
     662:	83 99       	sbic	0x10, 3	; 16
     664:	0a c0       	rjmp	.+20     	; 0x67a <GetPulseWidth2+0x20>
uint16_t GetPulseWidth2()
{
	
	uint32_t i,result;

	for(i=0;i<600000;i++)
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	a1 1d       	adc	r26, r1
     66a:	b1 1d       	adc	r27, r1
     66c:	80 3c       	cpi	r24, 0xC0	; 192
     66e:	27 e2       	ldi	r18, 0x27	; 39
     670:	92 07       	cpc	r25, r18
     672:	29 e0       	ldi	r18, 0x09	; 9
     674:	a2 07       	cpc	r26, r18
     676:	b1 05       	cpc	r27, r1
     678:	a0 f3       	brcs	.-24     	; 0x662 <GetPulseWidth2+0x8>
		continue;
		else
		break;
	}

	if(i==600000)
     67a:	80 3c       	cpi	r24, 0xC0	; 192
     67c:	97 42       	sbci	r25, 0x27	; 39
     67e:	a9 40       	sbci	r26, 0x09	; 9
     680:	b1 05       	cpc	r27, r1
     682:	79 f1       	breq	.+94     	; 0x6e2 <GetPulseWidth2+0x88>
	return US_ERROR;
	
	TCCR1A=0X00;
     684:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;
     68a:	1d bc       	out	0x2d, r1	; 45
     68c:	1c bc       	out	0x2c, r1	; 44

	for(i=0;i<600000;i++)
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	dc 01       	movw	r26, r24
     694:	0a c0       	rjmp	.+20     	; 0x6aa <GetPulseWidth2+0x50>
	{
		if(US_PIN2 & (1<<US_ECHO_POS2))
     696:	83 9b       	sbis	0x10, 3	; 16
     698:	0f c0       	rjmp	.+30     	; 0x6b8 <GetPulseWidth2+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;
     69a:	2c b5       	in	r18, 0x2c	; 44
     69c:	3d b5       	in	r19, 0x2d	; 45
     69e:	21 36       	cpi	r18, 0x61	; 97
     6a0:	3a 4e       	sbci	r19, 0xEA	; 234
     6a2:	50 f4       	brcc	.+20     	; 0x6b8 <GetPulseWidth2+0x5e>
	
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);
	TCNT1=0x00;

	for(i=0;i<600000;i++)
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	a1 1d       	adc	r26, r1
     6a8:	b1 1d       	adc	r27, r1
     6aa:	80 3c       	cpi	r24, 0xC0	; 192
     6ac:	27 e2       	ldi	r18, 0x27	; 39
     6ae:	92 07       	cpc	r25, r18
     6b0:	29 e0       	ldi	r18, 0x09	; 9
     6b2:	a2 07       	cpc	r26, r18
     6b4:	b1 05       	cpc	r27, r1
     6b6:	78 f3       	brcs	.-34     	; 0x696 <GetPulseWidth2+0x3c>
		}
		else
		break;
	}

	if(i==600000)
     6b8:	80 3c       	cpi	r24, 0xC0	; 192
     6ba:	97 42       	sbci	r25, 0x27	; 39
     6bc:	a9 40       	sbci	r26, 0x09	; 9
     6be:	b1 05       	cpc	r27, r1
     6c0:	99 f0       	breq	.+38     	; 0x6e8 <GetPulseWidth2+0x8e>
	return US_NO_OBSTACLE;

	result=TCNT1;
     6c2:	8c b5       	in	r24, 0x2c	; 44
     6c4:	9d b5       	in	r25, 0x2d	; 45
     6c6:	a0 e0       	ldi	r26, 0x00	; 0
     6c8:	b0 e0       	ldi	r27, 0x00	; 0

	TCCR1B=0x00;
     6ca:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
     6cc:	81 36       	cpi	r24, 0x61	; 97
     6ce:	2a ee       	ldi	r18, 0xEA	; 234
     6d0:	92 07       	cpc	r25, r18
     6d2:	a1 05       	cpc	r26, r1
     6d4:	b1 05       	cpc	r27, r1
     6d6:	58 f4       	brcc	.+22     	; 0x6ee <GetPulseWidth2+0x94>
	return US_NO_OBSTACLE;
	else
	return (result>>1);
     6d8:	b6 95       	lsr	r27
     6da:	a7 95       	ror	r26
     6dc:	97 95       	ror	r25
     6de:	87 95       	ror	r24
     6e0:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_ERROR;
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	9f ef       	ldi	r25, 0xFF	; 255
     6e6:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;
     6e8:	8e ef       	ldi	r24, 0xFE	; 254
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	08 95       	ret
	result=TCNT1;

	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;
     6ee:	8e ef       	ldi	r24, 0xFE	; 254
     6f0:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
     6f2:	08 95       	ret

000006f4 <ultrasonic2>:
	}
}

float ultrasonic2()
{
	DDRB = 0x00;
     6f4:	17 ba       	out	0x17, r1	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f6:	2f ef       	ldi	r18, 0xFF	; 255
     6f8:	31 ee       	ldi	r19, 0xE1	; 225
     6fa:	44 e0       	ldi	r20, 0x04	; 4
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	30 40       	sbci	r19, 0x00	; 0
     700:	40 40       	sbci	r20, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <ultrasonic2+0x8>
     704:	00 c0       	rjmp	.+0      	; 0x706 <ultrasonic2+0x12>
     706:	00 00       	nop
	
	while(1)
	{
		uint16_t r;
		_delay_ms(100);
		HCSR04Init2();
     708:	0e 94 1f 03 	call	0x63e	; 0x63e <HCSR04Init2>
		
		while(1)
		{
			HCSR04Trigger2();
     70c:	0e 94 23 03 	call	0x646	; 0x646 <HCSR04Trigger2>
			r=GetPulseWidth2();
     710:	0e 94 2d 03 	call	0x65a	; 0x65a <GetPulseWidth2>
			diameter =((r*0.034/2.0)+1);
     714:	bc 01       	movw	r22, r24
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 07 09 	call	0x120e	; 0x120e <__floatunsisf>
     71e:	26 e9       	ldi	r18, 0x96	; 150
     720:	33 e4       	ldi	r19, 0x43	; 67
     722:	4b e0       	ldi	r20, 0x0B	; 11
     724:	5d e3       	ldi	r21, 0x3D	; 61
     726:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	5f e3       	ldi	r21, 0x3F	; 63
     732:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5f e3       	ldi	r21, 0x3F	; 63
     73e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     742:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixsfsi>
     746:	2f ef       	ldi	r18, 0xFF	; 255
     748:	36 e7       	ldi	r19, 0x76	; 118
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	21 50       	subi	r18, 0x01	; 1
     74e:	30 40       	sbci	r19, 0x00	; 0
     750:	40 40       	sbci	r20, 0x00	; 0
     752:	e1 f7       	brne	.-8      	; 0x74c <ultrasonic2+0x58>
     754:	00 c0       	rjmp	.+0      	; 0x756 <ultrasonic2+0x62>
     756:	00 00       	nop
			_delay_ms(30);
			
			return diameter;
     758:	07 2e       	mov	r0, r23
     75a:	00 0c       	add	r0, r0
     75c:	88 0b       	sbc	r24, r24
     75e:	99 0b       	sbc	r25, r25
     760:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
		}
	}
}
     764:	08 95       	ret

00000766 <funcBall>:
	_delay_ms(2);
	lcdcmd(0x80);		/* Cursor at home position */
	
}

void funcBall(){
     766:	4f 92       	push	r4
     768:	5f 92       	push	r5
     76a:	6f 92       	push	r6
     76c:	7f 92       	push	r7
     76e:	8f 92       	push	r8
     770:	9f 92       	push	r9
     772:	af 92       	push	r10
     774:	bf 92       	push	r11
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	6e 97       	sbiw	r28, 0x1e	; 30
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
	unsigned char sportNo1;
	unsigned char sportNo2;
	int intSportNo1;
	int intSportNo2;
	int sportNoFull;
	unsigned char cArray[10]={'0','1','2','3','4','5','6','7','8','9'};
     796:	8a e0       	ldi	r24, 0x0A	; 10
     798:	e0 e7       	ldi	r30, 0x70	; 112
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	de 01       	movw	r26, r28
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	01 90       	ld	r0, Z+
     7a2:	0d 92       	st	X+, r0
     7a4:	8a 95       	dec	r24
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <funcBall+0x3a>
	int intArray[10]={0,1,2,3,4,5,6,7,8,9};
     7a8:	84 e1       	ldi	r24, 0x14	; 20
     7aa:	ea e7       	ldi	r30, 0x7A	; 122
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	de 01       	movw	r26, r28
     7b0:	1b 96       	adiw	r26, 0x0b	; 11
     7b2:	01 90       	ld	r0, Z+
     7b4:	0d 92       	st	X+, r0
     7b6:	8a 95       	dec	r24
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <funcBall+0x4c>
	

	do {
		LCD_Clear();
     7ba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
		lcd_Print("Enter sport");
     7be:	8e e8       	ldi	r24, 0x8E	; 142
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     7c6:	80 ec       	ldi	r24, 0xC0	; 192
     7c8:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Number:");
     7cc:	8a e9       	ldi	r24, 0x9A	; 154
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		sportNo1= lcd_write();
     7d4:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
     7d8:	d8 2e       	mov	r13, r24
		sportNo2= lcd_write();
     7da:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
		
		for (int i=0; i<10;i++)
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	23 c0       	rjmp	.+70     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		{
			if (sportNo1==cArray[i])
     7e4:	e1 e0       	ldi	r30, 0x01	; 1
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	ec 0f       	add	r30, r28
     7ea:	fd 1f       	adc	r31, r29
     7ec:	e2 0f       	add	r30, r18
     7ee:	f3 1f       	adc	r31, r19
     7f0:	90 81       	ld	r25, Z
     7f2:	d9 12       	cpse	r13, r25
     7f4:	0b c0       	rjmp	.+22     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			{
				intSportNo1= intArray[i];
     7f6:	f9 01       	movw	r30, r18
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	4c 0f       	add	r20, r28
     802:	5d 1f       	adc	r21, r29
     804:	e4 0f       	add	r30, r20
     806:	f5 1f       	adc	r31, r21
     808:	02 85       	ldd	r16, Z+10	; 0x0a
     80a:	13 85       	ldd	r17, Z+11	; 0x0b
			}
			if (sportNo2==cArray[i])
     80c:	89 13       	cpse	r24, r25
     80e:	0b c0       	rjmp	.+22     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
			{
				intSportNo2= intArray[i];
     810:	f9 01       	movw	r30, r18
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	50 e0       	ldi	r21, 0x00	; 0
     81a:	4c 0f       	add	r20, r28
     81c:	5d 1f       	adc	r21, r29
     81e:	e4 0f       	add	r30, r20
     820:	f5 1f       	adc	r31, r21
     822:	e2 84       	ldd	r14, Z+10	; 0x0a
     824:	f3 84       	ldd	r15, Z+11	; 0x0b
		lcdcmd(0xC0);
		lcd_Print("Number:");
		sportNo1= lcd_write();
		sportNo2= lcd_write();
		
		for (int i=0; i<10;i++)
     826:	2f 5f       	subi	r18, 0xFF	; 255
     828:	3f 4f       	sbci	r19, 0xFF	; 255
     82a:	2a 30       	cpi	r18, 0x0A	; 10
     82c:	31 05       	cpc	r19, r1
     82e:	d4 f2       	brlt	.-76     	; 0x7e4 <funcBall+0x7e>
				intSportNo2= intArray[i];
			}
			
		}
		
		sportNoFull = intSportNo1*10 + intSportNo2;
     830:	c8 01       	movw	r24, r16
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	68 01       	movw	r12, r16
     840:	cc 0c       	add	r12, r12
     842:	dd 1c       	adc	r13, r13
     844:	c8 0e       	add	r12, r24
     846:	d9 1e       	adc	r13, r25
     848:	ce 0c       	add	r12, r14
     84a:	df 1c       	adc	r13, r15

		do{
			enter =lcd_write();
     84c:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
		} while (enter !='-');
     850:	8d 32       	cpi	r24, 0x2D	; 45
     852:	e1 f7       	brne	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		
	} while (sportNoFull > 16);
     854:	51 e1       	ldi	r21, 0x11	; 17
     856:	c5 16       	cp	r12, r21
     858:	d1 04       	cpc	r13, r1
     85a:	0c f0       	brlt	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85c:	ae cf       	rjmp	.-164    	; 0x7ba <funcBall+0x54>
	

	LCD_Clear();
     85e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
	lcd_Print("Insert and Press");
     862:	82 ea       	ldi	r24, 0xA2	; 162
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
	lcdcmd(0xC0);
     86a:	80 ec       	ldi	r24, 0xC0	; 192
     86c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
	lcd_Print("Enter !");
     870:	83 eb       	ldi	r24, 0xB3	; 179
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>

	do{
		enter =lcd_write();
     878:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
	} while (enter !='-');
     87c:	8d 32       	cpi	r24, 0x2D	; 45
     87e:	e1 f7       	brne	.-8      	; 0x878 <__stack+0x19>

	LCD_Clear();
     880:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
	lcd_Print("Processing...");
     884:	8b eb       	ldi	r24, 0xBB	; 187
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     88c:	8f e3       	ldi	r24, 0x3F	; 63
     88e:	9c e9       	ldi	r25, 0x9C	; 156
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <__stack+0x31>
     894:	00 c0       	rjmp	.+0      	; 0x896 <__stack+0x37>
     896:	00 00       	nop
	_delay_ms(10);
	
	
	USART_Transmit('A'); //pass to the second chip
     898:	81 e4       	ldi	r24, 0x41	; 65
     89a:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	24 e3       	ldi	r18, 0x34	; 52
     8a2:	4c e0       	ldi	r20, 0x0C	; 12
     8a4:	91 50       	subi	r25, 0x01	; 1
     8a6:	20 40       	sbci	r18, 0x00	; 0
     8a8:	40 40       	sbci	r20, 0x00	; 0
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__stack+0x4f>
     8ae:	00 00       	nop
	_delay_ms(250);	
	
	itemWeight = loadCellRead();
     8b0:	0e 94 9f 01 	call	0x33e	; 0x33e <loadCellRead>
     8b4:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <itemWeight>
     8b8:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <itemWeight+0x1>
     8bc:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <itemWeight+0x2>
     8c0:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <itemWeight+0x3>
	LCD_Clear();
     8c4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
	if( itemWeight<= (ballStandards[sportNoFull-1][2]) - 0.010 ||  itemWeight>= (ballStandards[sportNoFull-1][2]) + 0.010  )
     8c8:	51 e0       	ldi	r21, 0x01	; 1
     8ca:	c5 1a       	sub	r12, r21
     8cc:	d1 08       	sbc	r13, r1
     8ce:	f6 01       	movw	r30, r12
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ec 0d       	add	r30, r12
     8d6:	fd 1d       	adc	r31, r13
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e8 56       	subi	r30, 0x68	; 104
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	40 84       	ldd	r4, Z+8	; 0x08
     8e6:	51 84       	ldd	r5, Z+9	; 0x09
     8e8:	62 84       	ldd	r6, Z+10	; 0x0a
     8ea:	73 84       	ldd	r7, Z+11	; 0x0b
     8ec:	2a e0       	ldi	r18, 0x0A	; 10
     8ee:	37 ed       	ldi	r19, 0xD7	; 215
     8f0:	43 e2       	ldi	r20, 0x23	; 35
     8f2:	5c e3       	ldi	r21, 0x3C	; 60
     8f4:	c3 01       	movw	r24, r6
     8f6:	b2 01       	movw	r22, r4
     8f8:	0e 94 ed 07 	call	0xfda	; 0xfda <__subsf3>
     8fc:	80 90 4b 02 	lds	r8, 0x024B	; 0x80024b <itemWeight>
     900:	90 90 4c 02 	lds	r9, 0x024C	; 0x80024c <itemWeight+0x1>
     904:	a0 90 4d 02 	lds	r10, 0x024D	; 0x80024d <itemWeight+0x2>
     908:	b0 90 4e 02 	lds	r11, 0x024E	; 0x80024e <itemWeight+0x3>
     90c:	a5 01       	movw	r20, r10
     90e:	94 01       	movw	r18, r8
     910:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     914:	88 23       	and	r24, r24
     916:	84 f4       	brge	.+32     	; 0x938 <__stack+0xd9>
     918:	2a e0       	ldi	r18, 0x0A	; 10
     91a:	37 ed       	ldi	r19, 0xD7	; 215
     91c:	43 e2       	ldi	r20, 0x23	; 35
     91e:	5c e3       	ldi	r21, 0x3C	; 60
     920:	c3 01       	movw	r24, r6
     922:	b2 01       	movw	r22, r4
     924:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     928:	9b 01       	movw	r18, r22
     92a:	ac 01       	movw	r20, r24
     92c:	c5 01       	movw	r24, r10
     92e:	b4 01       	movw	r22, r8
     930:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     934:	88 23       	and	r24, r24
     936:	64 f0       	brlt	.+24     	; 0x950 <__stack+0xf1>
	{
		lcd_Print("Weight test");
     938:	89 ec       	ldi	r24, 0xC9	; 201
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     940:	80 ec       	ldi	r24, 0xC0	; 192
     942:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Fail!");
     946:	85 ed       	ldi	r24, 0xD5	; 213
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     94e:	0b c0       	rjmp	.+22     	; 0x966 <__stack+0x107>
		
		} else {
		lcd_Print("Weight test");
     950:	89 ec       	ldi	r24, 0xC9	; 201
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     958:	80 ec       	ldi	r24, 0xC0	; 192
     95a:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Pass!");
     95e:	8b ed       	ldi	r24, 0xDB	; 219
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	91 ee       	ldi	r25, 0xE1	; 225
     96a:	24 e0       	ldi	r18, 0x04	; 4
     96c:	81 50       	subi	r24, 0x01	; 1
     96e:	90 40       	sbci	r25, 0x00	; 0
     970:	20 40       	sbci	r18, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <__stack+0x10d>
     974:	00 c0       	rjmp	.+0      	; 0x976 <__stack+0x117>
     976:	00 00       	nop
	}	
	
	_delay_ms(100);
	LCD_Clear();
     978:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
	

	USART_Transmit('B'); //pass to the second chip
     97c:	82 e4       	ldi	r24, 0x42	; 66
     97e:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
     982:	4f ef       	ldi	r20, 0xFF	; 255
     984:	53 ec       	ldi	r21, 0xC3	; 195
     986:	89 e0       	ldi	r24, 0x09	; 9
     988:	41 50       	subi	r20, 0x01	; 1
     98a:	50 40       	sbci	r21, 0x00	; 0
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	e1 f7       	brne	.-8      	; 0x988 <__stack+0x129>
     990:	00 c0       	rjmp	.+0      	; 0x992 <__stack+0x133>
     992:	00 00       	nop
	_delay_ms(200);

	//diameter_ball =  ultrasonic1();----------------------------------------------
	//_delay_ms(100);----------------------------------------------------
	
	itoa(diameter_ball, numberString, 10);
     994:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end>
     998:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x1>
     99c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end+0x2>
     9a0:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x3>
     9a4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixsfsi>
     9a8:	dc 01       	movw	r26, r24
     9aa:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9ac:	4a e0       	ldi	r20, 0x0A	; 10
     9ae:	66 e4       	ldi	r22, 0x46	; 70
     9b0:	72 e0       	ldi	r23, 0x02	; 2
     9b2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__itoa_ncheck>
	//lcd_Print(numberString);
	//_delay_ms(100);
	//LCD_Clear();
			
	if( diameter_ball<= (ballStandards[sportNoFull-1][0]) - 0.010 ||  diameter_ball>= (ballStandards[sportNoFull-1][0]) + 0.010  )
     9b6:	f6 01       	movw	r30, r12
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	ce 0e       	add	r12, r30
     9be:	df 1e       	adc	r13, r31
     9c0:	f6 01       	movw	r30, r12
     9c2:	ee 0f       	add	r30, r30
     9c4:	ff 1f       	adc	r31, r31
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	e8 56       	subi	r30, 0x68	; 104
     9cc:	ff 4f       	sbci	r31, 0xFF	; 255
     9ce:	80 80       	ld	r8, Z
     9d0:	91 80       	ldd	r9, Z+1	; 0x01
     9d2:	a2 80       	ldd	r10, Z+2	; 0x02
     9d4:	b3 80       	ldd	r11, Z+3	; 0x03
     9d6:	2a e0       	ldi	r18, 0x0A	; 10
     9d8:	37 ed       	ldi	r19, 0xD7	; 215
     9da:	43 e2       	ldi	r20, 0x23	; 35
     9dc:	5c e3       	ldi	r21, 0x3C	; 60
     9de:	c5 01       	movw	r24, r10
     9e0:	b4 01       	movw	r22, r8
     9e2:	0e 94 ed 07 	call	0xfda	; 0xfda <__subsf3>
     9e6:	c0 90 30 02 	lds	r12, 0x0230	; 0x800230 <__data_end>
     9ea:	d0 90 31 02 	lds	r13, 0x0231	; 0x800231 <__data_end+0x1>
     9ee:	e0 90 32 02 	lds	r14, 0x0232	; 0x800232 <__data_end+0x2>
     9f2:	f0 90 33 02 	lds	r15, 0x0233	; 0x800233 <__data_end+0x3>
     9f6:	a7 01       	movw	r20, r14
     9f8:	96 01       	movw	r18, r12
     9fa:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     9fe:	88 23       	and	r24, r24
     a00:	84 f4       	brge	.+32     	; 0xa22 <__stack+0x1c3>
     a02:	2a e0       	ldi	r18, 0x0A	; 10
     a04:	37 ed       	ldi	r19, 0xD7	; 215
     a06:	43 e2       	ldi	r20, 0x23	; 35
     a08:	5c e3       	ldi	r21, 0x3C	; 60
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	c7 01       	movw	r24, r14
     a18:	b6 01       	movw	r22, r12
     a1a:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     a1e:	88 23       	and	r24, r24
     a20:	64 f0       	brlt	.+24     	; 0xa3a <__stack+0x1db>
	{
		lcd_Print(" diameter test");
     a22:	81 ee       	ldi	r24, 0xE1	; 225
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     a2a:	80 ec       	ldi	r24, 0xC0	; 192
     a2c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Fail!");
     a30:	85 ed       	ldi	r24, 0xD5	; 213
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     a38:	0b c0       	rjmp	.+22     	; 0xa50 <__stack+0x1f1>
		
		} else {
		lcd_Print(" diameter test");
     a3a:	81 ee       	ldi	r24, 0xE1	; 225
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     a42:	80 ec       	ldi	r24, 0xC0	; 192
     a44:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Pass!");
     a48:	8b ed       	ldi	r24, 0xDB	; 219
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     a50:	9f ef       	ldi	r25, 0xFF	; 255
     a52:	21 ee       	ldi	r18, 0xE1	; 225
     a54:	44 e0       	ldi	r20, 0x04	; 4
     a56:	91 50       	subi	r25, 0x01	; 1
     a58:	20 40       	sbci	r18, 0x00	; 0
     a5a:	40 40       	sbci	r20, 0x00	; 0
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <__stack+0x1f7>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <__stack+0x201>
     a60:	00 00       	nop
	}
	
		_delay_ms(100);
		LCD_Clear();
     a62:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
		
	USART_Transmit('C'); //pass to the second chip
     a66:	83 e4       	ldi	r24, 0x43	; 67
     a68:	0e 94 50 00 	call	0xa0	; 0xa0 <USART_Transmit>
     a6c:	5f ef       	ldi	r21, 0xFF	; 255
     a6e:	87 e9       	ldi	r24, 0x97	; 151
     a70:	9a e3       	ldi	r25, 0x3A	; 58
     a72:	51 50       	subi	r21, 0x01	; 1
     a74:	80 40       	sbci	r24, 0x00	; 0
     a76:	90 40       	sbci	r25, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <__stack+0x213>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <__stack+0x21d>
     a7c:	00 00       	nop
	_delay_ms(1200);
	
	DDRC=0b00001000; // set PC3 as output to control the LED
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	84 bb       	out	0x14, r24	; 20
	DDRA|=(1<<ADC_Out);         //Make PA0 as input
     a82:	8a b3       	in	r24, 0x1a	; 26
     a84:	88 60       	ori	r24, 0x08	; 8
     a86:	8a bb       	out	0x1a, r24	; 26
	

	if(1<<ADC_Out)
	{
		
		bounce_ball = ultrasonic2();
     a88:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ultrasonic2>
     a8c:	6b 01       	movw	r12, r22
     a8e:	7c 01       	movw	r14, r24
     a90:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <bounce_ball>
     a94:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <bounce_ball+0x1>
     a98:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <bounce_ball+0x2>
     a9c:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <bounce_ball+0x3>
		if( bounce_ball<= (stickStandards[intSportNo1-1][0]) - 0.010 ||  bounce_ball >= (stickStandards[intSportNo1-1][0]) + 0.010  )
     aa0:	f8 01       	movw	r30, r16
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	e0 5a       	subi	r30, 0xA0	; 160
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 80       	ld	r8, Z
     ab6:	91 80       	ldd	r9, Z+1	; 0x01
     ab8:	a2 80       	ldd	r10, Z+2	; 0x02
     aba:	b3 80       	ldd	r11, Z+3	; 0x03
     abc:	2a e0       	ldi	r18, 0x0A	; 10
     abe:	37 ed       	ldi	r19, 0xD7	; 215
     ac0:	43 e2       	ldi	r20, 0x23	; 35
     ac2:	5c e3       	ldi	r21, 0x3C	; 60
     ac4:	c5 01       	movw	r24, r10
     ac6:	b4 01       	movw	r22, r8
     ac8:	0e 94 ed 07 	call	0xfda	; 0xfda <__subsf3>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	c7 01       	movw	r24, r14
     ad2:	b6 01       	movw	r22, r12
     ad4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__cmpsf2>
     ad8:	18 16       	cp	r1, r24
     ada:	84 f4       	brge	.+32     	; 0xafc <__stack+0x29d>
     adc:	2a e0       	ldi	r18, 0x0A	; 10
     ade:	37 ed       	ldi	r19, 0xD7	; 215
     ae0:	43 e2       	ldi	r20, 0x23	; 35
     ae2:	5c e3       	ldi	r21, 0x3C	; 60
     ae4:	c5 01       	movw	r24, r10
     ae6:	b4 01       	movw	r22, r8
     ae8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	c7 01       	movw	r24, r14
     af2:	b6 01       	movw	r22, r12
     af4:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     af8:	88 23       	and	r24, r24
     afa:	64 f0       	brlt	.+24     	; 0xb14 <__stack+0x2b5>
		{
			lcd_Print("Bounce test");
     afc:	80 ef       	ldi	r24, 0xF0	; 240
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
			lcdcmd(0xC0);
     b04:	80 ec       	ldi	r24, 0xC0	; 192
     b06:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
			lcd_Print("Fail!");
     b0a:	85 ed       	ldi	r24, 0xD5	; 213
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     b12:	0b c0       	rjmp	.+22     	; 0xb2a <__stack+0x2cb>
			
			} else {
			lcd_Print("Bounce test");
     b14:	80 ef       	ldi	r24, 0xF0	; 240
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
			lcdcmd(0xC0);
     b1c:	80 ec       	ldi	r24, 0xC0	; 192
     b1e:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
			lcd_Print("Pass!");
     b22:	8b ed       	ldi	r24, 0xDB	; 219
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	41 ee       	ldi	r20, 0xE1	; 225
     b2e:	54 e0       	ldi	r21, 0x04	; 4
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	40 40       	sbci	r20, 0x00	; 0
     b34:	50 40       	sbci	r21, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <__stack+0x2d1>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <__stack+0x2db>
     b3a:	00 00       	nop
		}
		
			_delay_ms(100);
			LCD_Clear();
     b3c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
			
	}
	

	
}
     b40:	6e 96       	adiw	r28, 0x1e	; 30
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	9f 90       	pop	r9
     b62:	8f 90       	pop	r8
     b64:	7f 90       	pop	r7
     b66:	6f 90       	pop	r6
     b68:	5f 90       	pop	r5
     b6a:	4f 90       	pop	r4
     b6c:	08 95       	ret

00000b6e <HCSR04Init3>:
}

void HCSR04Init3()
{
	
	US_DDR3|=(1<<US_TRIG_POS3); //PC0
     b6e:	84 b3       	in	r24, 0x14	; 20
     b70:	84 60       	ori	r24, 0x04	; 4
     b72:	84 bb       	out	0x14, r24	; 20
     b74:	08 95       	ret

00000b76 <HCSR04Trigger3>:
}

void HCSR04Trigger3()
{
	
	US_PORT3|=(1<<US_TRIG_POS3); //PC0   //high
     b76:	85 b3       	in	r24, 0x15	; 21
     b78:	84 60       	ori	r24, 0x04	; 4
     b7a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b7c:	80 e5       	ldi	r24, 0x50	; 80
     b7e:	8a 95       	dec	r24
     b80:	f1 f7       	brne	.-4      	; 0xb7e <HCSR04Trigger3+0x8>
	
	_delay_us(15);
	
	US_PORT3&=~(1<<US_TRIG_POS3);	//PC0	//low
     b82:	85 b3       	in	r24, 0x15	; 21
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	85 bb       	out	0x15, r24	; 21
     b88:	08 95       	ret

00000b8a <GetPulseWidth3>:
uint16_t GetPulseWidth3()
{
	
	uint32_t i,result;

	for(i=0;i<600000;i++)
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	dc 01       	movw	r26, r24
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <GetPulseWidth3+0x12>
	{
		if(!(US_PIN3 & (1<<US_ECHO_POS3)))	//PC1
     b92:	9b 99       	sbic	0x13, 3	; 19
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <GetPulseWidth3+0x20>
uint16_t GetPulseWidth3()
{
	
	uint32_t i,result;

	for(i=0;i<600000;i++)
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	a1 1d       	adc	r26, r1
     b9a:	b1 1d       	adc	r27, r1
     b9c:	80 3c       	cpi	r24, 0xC0	; 192
     b9e:	27 e2       	ldi	r18, 0x27	; 39
     ba0:	92 07       	cpc	r25, r18
     ba2:	29 e0       	ldi	r18, 0x09	; 9
     ba4:	a2 07       	cpc	r26, r18
     ba6:	b1 05       	cpc	r27, r1
     ba8:	a0 f3       	brcs	.-24     	; 0xb92 <GetPulseWidth3+0x8>
		continue;
		else
		break;
	}

	if(i==600000)
     baa:	80 3c       	cpi	r24, 0xC0	; 192
     bac:	97 42       	sbci	r25, 0x27	; 39
     bae:	a9 40       	sbci	r26, 0x09	; 9
     bb0:	b1 05       	cpc	r27, r1
     bb2:	79 f1       	breq	.+94     	; 0xc12 <GetPulseWidth3+0x88>
	return US_ERROR;
	
	TCCR1A=0X00;
     bb4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0x00;
     bba:	1d bc       	out	0x2d, r1	; 45
     bbc:	1c bc       	out	0x2c, r1	; 44

	for(i=0;i<600000;i++)
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	dc 01       	movw	r26, r24
     bc4:	0a c0       	rjmp	.+20     	; 0xbda <GetPulseWidth3+0x50>
	{
		if(US_PIN3 & (1<<US_ECHO_POS3))
     bc6:	9b 9b       	sbis	0x13, 3	; 19
     bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <GetPulseWidth3+0x5e>
		{
			if(TCNT1 > 60000) break; else continue;
     bca:	2c b5       	in	r18, 0x2c	; 44
     bcc:	3d b5       	in	r19, 0x2d	; 45
     bce:	21 36       	cpi	r18, 0x61	; 97
     bd0:	3a 4e       	sbci	r19, 0xEA	; 234
     bd2:	50 f4       	brcc	.+20     	; 0xbe8 <GetPulseWidth3+0x5e>
	
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);
	TCNT1=0x00;

	for(i=0;i<600000;i++)
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	a1 1d       	adc	r26, r1
     bd8:	b1 1d       	adc	r27, r1
     bda:	80 3c       	cpi	r24, 0xC0	; 192
     bdc:	27 e2       	ldi	r18, 0x27	; 39
     bde:	92 07       	cpc	r25, r18
     be0:	29 e0       	ldi	r18, 0x09	; 9
     be2:	a2 07       	cpc	r26, r18
     be4:	b1 05       	cpc	r27, r1
     be6:	78 f3       	brcs	.-34     	; 0xbc6 <GetPulseWidth3+0x3c>
		}
		else
		break;
	}

	if(i==600000)
     be8:	80 3c       	cpi	r24, 0xC0	; 192
     bea:	97 42       	sbci	r25, 0x27	; 39
     bec:	a9 40       	sbci	r26, 0x09	; 9
     bee:	b1 05       	cpc	r27, r1
     bf0:	99 f0       	breq	.+38     	; 0xc18 <GetPulseWidth3+0x8e>
	return US_NO_OBSTACLE;

	result=TCNT1;
     bf2:	8c b5       	in	r24, 0x2c	; 44
     bf4:	9d b5       	in	r25, 0x2d	; 45
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0

	TCCR1B=0x00;
     bfa:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
     bfc:	81 36       	cpi	r24, 0x61	; 97
     bfe:	2a ee       	ldi	r18, 0xEA	; 234
     c00:	92 07       	cpc	r25, r18
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	58 f4       	brcc	.+22     	; 0xc1e <GetPulseWidth3+0x94>
	return US_NO_OBSTACLE;
	else
	return (result>>1);
     c08:	b6 95       	lsr	r27
     c0a:	a7 95       	ror	r26
     c0c:	97 95       	ror	r25
     c0e:	87 95       	ror	r24
     c10:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_ERROR;
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;
     c18:	8e ef       	ldi	r24, 0xFE	; 254
     c1a:	9f ef       	ldi	r25, 0xFF	; 255
     c1c:	08 95       	ret
	result=TCNT1;

	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;
     c1e:	8e ef       	ldi	r24, 0xFE	; 254
     c20:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
     c22:	08 95       	ret

00000c24 <ultrasonic_stick>:
	}
}

float ultrasonic_stick()
{
	DDRB = 0x00;
     c24:	17 ba       	out	0x17, r1	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c26:	2f ef       	ldi	r18, 0xFF	; 255
     c28:	31 ee       	ldi	r19, 0xE1	; 225
     c2a:	44 e0       	ldi	r20, 0x04	; 4
     c2c:	21 50       	subi	r18, 0x01	; 1
     c2e:	30 40       	sbci	r19, 0x00	; 0
     c30:	40 40       	sbci	r20, 0x00	; 0
     c32:	e1 f7       	brne	.-8      	; 0xc2c <ultrasonic_stick+0x8>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <ultrasonic_stick+0x12>
     c36:	00 00       	nop

	while(1)
	{
		uint16_t r;
		_delay_ms(100);
		HCSR04Init3();
     c38:	0e 94 b7 05 	call	0xb6e	; 0xb6e <HCSR04Init3>
		
		while(1)
		{
			HCSR04Trigger3();
     c3c:	0e 94 bb 05 	call	0xb76	; 0xb76 <HCSR04Trigger3>
			r=GetPulseWidth3();
     c40:	0e 94 c5 05 	call	0xb8a	; 0xb8a <GetPulseWidth3>
			diameter =((r*0.034/2.0)+1);
     c44:	bc 01       	movw	r22, r24
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 07 09 	call	0x120e	; 0x120e <__floatunsisf>
     c4e:	26 e9       	ldi	r18, 0x96	; 150
     c50:	33 e4       	ldi	r19, 0x43	; 67
     c52:	4b e0       	ldi	r20, 0x0B	; 11
     c54:	5d e3       	ldi	r21, 0x3D	; 61
     c56:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsf3>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e8       	ldi	r20, 0x80	; 128
     c6c:	5f e3       	ldi	r21, 0x3F	; 63
     c6e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     c72:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixsfsi>
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	36 e7       	ldi	r19, 0x76	; 118
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	30 40       	sbci	r19, 0x00	; 0
     c80:	40 40       	sbci	r20, 0x00	; 0
     c82:	e1 f7       	brne	.-8      	; 0xc7c <ultrasonic_stick+0x58>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <ultrasonic_stick+0x62>
     c86:	00 00       	nop
			_delay_ms(30);
			
			return diameter;
     c88:	07 2e       	mov	r0, r23
     c8a:	00 0c       	add	r0, r0
     c8c:	88 0b       	sbc	r24, r24
     c8e:	99 0b       	sbc	r25, r25
     c90:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
		}
	}
}
     c94:	08 95       	ret

00000c96 <funcStick>:

	
}


void funcStick(){
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	6e 97       	sbiw	r28, 0x1e	; 30
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char enter;
	unsigned char sportNo1;
	int intSportNo1;
	unsigned char cArray[10]={'0','1','2','3','4','5','6','7','8','9'};
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	e0 e7       	ldi	r30, 0x70	; 112
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	de 01       	movw	r26, r28
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	01 90       	ld	r0, Z+
     cca:	0d 92       	st	X+, r0
     ccc:	8a 95       	dec	r24
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <funcStick+0x32>
	int intArray[10]={0,1,2,3,4,5,6,7,8,9};
     cd0:	84 e1       	ldi	r24, 0x14	; 20
     cd2:	ea e7       	ldi	r30, 0x7A	; 122
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
     cd6:	de 01       	movw	r26, r28
     cd8:	1b 96       	adiw	r26, 0x0b	; 11
     cda:	01 90       	ld	r0, Z+
     cdc:	0d 92       	st	X+, r0
     cde:	8a 95       	dec	r24
     ce0:	e1 f7       	brne	.-8      	; 0xcda <funcStick+0x44>


	do {
		LCD_Clear();
     ce2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
		lcd_Print("Enter sport");
     ce6:	8e e8       	ldi	r24, 0x8E	; 142
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     cee:	80 ec       	ldi	r24, 0xC0	; 192
     cf0:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Number:");
     cf4:	8a e9       	ldi	r24, 0x9A	; 154
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		sportNo1= lcd_write();
     cfc:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
		
		for (int i=0; i<10;i++)
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <funcStick+0x9c>
		{
			if (sportNo1==cArray[i])
     d06:	e1 e0       	ldi	r30, 0x01	; 1
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	ec 0f       	add	r30, r28
     d0c:	fd 1f       	adc	r31, r29
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	90 81       	ld	r25, Z
     d14:	89 13       	cpse	r24, r25
     d16:	0b c0       	rjmp	.+22     	; 0xd2e <funcStick+0x98>
			{
				intSportNo1= intArray[i];
     d18:	f9 01       	movw	r30, r18
     d1a:	ee 0f       	add	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	41 e0       	ldi	r20, 0x01	; 1
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	4c 0f       	add	r20, r28
     d24:	5d 1f       	adc	r21, r29
     d26:	e4 0f       	add	r30, r20
     d28:	f5 1f       	adc	r31, r21
     d2a:	02 85       	ldd	r16, Z+10	; 0x0a
     d2c:	13 85       	ldd	r17, Z+11	; 0x0b
		lcd_Print("Enter sport");
		lcdcmd(0xC0);
		lcd_Print("Number:");
		sportNo1= lcd_write();
		
		for (int i=0; i<10;i++)
     d2e:	2f 5f       	subi	r18, 0xFF	; 255
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	2a 30       	cpi	r18, 0x0A	; 10
     d34:	31 05       	cpc	r19, r1
     d36:	3c f3       	brlt	.-50     	; 0xd06 <funcStick+0x70>
			}
		}

		
		do{
			enter =lcd_write();
     d38:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
		} while (enter !='-');
     d3c:	8d 32       	cpi	r24, 0x2D	; 45
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <funcStick+0xa2>
		
	} while (intSportNo1 > 7);
     d40:	08 30       	cpi	r16, 0x08	; 8
     d42:	11 05       	cpc	r17, r1
     d44:	74 f6       	brge	.-100    	; 0xce2 <funcStick+0x4c>
	

	LCD_Clear();
     d46:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
	lcd_Print("Insert and Press");
     d4a:	82 ea       	ldi	r24, 0xA2	; 162
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
	lcdcmd(0xC0);
     d52:	80 ec       	ldi	r24, 0xC0	; 192
     d54:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
	lcd_Print("Enter !");
     d58:	83 eb       	ldi	r24, 0xB3	; 179
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>

	do{
		enter =lcd_write();
     d60:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
	} while (enter !='-');
     d64:	8d 32       	cpi	r24, 0x2D	; 45
     d66:	e1 f7       	brne	.-8      	; 0xd60 <funcStick+0xca>
	LCD_Clear();
     d68:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
	lcd_Print("Processing...");
     d6c:	8b eb       	ldi	r24, 0xBB	; 187
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     d74:	5f ef       	ldi	r21, 0xFF	; 255
     d76:	81 ee       	ldi	r24, 0xE1	; 225
     d78:	94 e0       	ldi	r25, 0x04	; 4
     d7a:	51 50       	subi	r21, 0x01	; 1
     d7c:	80 40       	sbci	r24, 0x00	; 0
     d7e:	90 40       	sbci	r25, 0x00	; 0
     d80:	e1 f7       	brne	.-8      	; 0xd7a <funcStick+0xe4>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <funcStick+0xee>
     d84:	00 00       	nop
	_delay_ms(100);
	weight_stick = loadCellReadStick();
     d86:	0e 94 5f 02 	call	0x4be	; 0x4be <loadCellReadStick>
     d8a:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <weight_stick>
     d8e:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <weight_stick+0x1>
     d92:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <weight_stick+0x2>
     d96:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <weight_stick+0x3>
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	41 ee       	ldi	r20, 0xE1	; 225
     d9e:	54 e0       	ldi	r21, 0x04	; 4
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	40 40       	sbci	r20, 0x00	; 0
     da4:	50 40       	sbci	r21, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <funcStick+0x10a>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <funcStick+0x114>
     daa:	00 00       	nop
	_delay_ms(100);
	
	if( weight_stick<= (stickStandards[intSportNo1-1][1]) - 0.010 ||  weight_stick >= (stickStandards[intSportNo1-1][1]) + 0.010  )
     dac:	01 50       	subi	r16, 0x01	; 1
     dae:	11 09       	sbc	r17, r1
     db0:	f8 01       	movw	r30, r16
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	e0 5a       	subi	r30, 0xA0	; 160
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	84 80       	ldd	r8, Z+4	; 0x04
     dc4:	95 80       	ldd	r9, Z+5	; 0x05
     dc6:	a6 80       	ldd	r10, Z+6	; 0x06
     dc8:	b7 80       	ldd	r11, Z+7	; 0x07
     dca:	2a e0       	ldi	r18, 0x0A	; 10
     dcc:	37 ed       	ldi	r19, 0xD7	; 215
     dce:	43 e2       	ldi	r20, 0x23	; 35
     dd0:	5c e3       	ldi	r21, 0x3C	; 60
     dd2:	c5 01       	movw	r24, r10
     dd4:	b4 01       	movw	r22, r8
     dd6:	0e 94 ed 07 	call	0xfda	; 0xfda <__subsf3>
     dda:	c0 90 3a 02 	lds	r12, 0x023A	; 0x80023a <weight_stick>
     dde:	d0 90 3b 02 	lds	r13, 0x023B	; 0x80023b <weight_stick+0x1>
     de2:	e0 90 3c 02 	lds	r14, 0x023C	; 0x80023c <weight_stick+0x2>
     de6:	f0 90 3d 02 	lds	r15, 0x023D	; 0x80023d <weight_stick+0x3>
     dea:	a7 01       	movw	r20, r14
     dec:	96 01       	movw	r18, r12
     dee:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     df2:	88 23       	and	r24, r24
     df4:	84 f4       	brge	.+32     	; 0xe16 <funcStick+0x180>
     df6:	2a e0       	ldi	r18, 0x0A	; 10
     df8:	37 ed       	ldi	r19, 0xD7	; 215
     dfa:	43 e2       	ldi	r20, 0x23	; 35
     dfc:	5c e3       	ldi	r21, 0x3C	; 60
     dfe:	c5 01       	movw	r24, r10
     e00:	b4 01       	movw	r22, r8
     e02:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	c7 01       	movw	r24, r14
     e0c:	b6 01       	movw	r22, r12
     e0e:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     e12:	88 23       	and	r24, r24
     e14:	64 f0       	brlt	.+24     	; 0xe2e <funcStick+0x198>
	{
		lcd_Print("Weight test");
     e16:	89 ec       	ldi	r24, 0xC9	; 201
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     e1e:	80 ec       	ldi	r24, 0xC0	; 192
     e20:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Fail!");
     e24:	85 ed       	ldi	r24, 0xD5	; 213
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <funcStick+0x1ae>
		
		} else {
		lcd_Print("Weight test");
     e2e:	89 ec       	ldi	r24, 0xC9	; 201
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     e36:	80 ec       	ldi	r24, 0xC0	; 192
     e38:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Pass!");
     e3c:	8b ed       	ldi	r24, 0xDB	; 219
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	91 ee       	ldi	r25, 0xE1	; 225
     e48:	24 e0       	ldi	r18, 0x04	; 4
     e4a:	81 50       	subi	r24, 0x01	; 1
     e4c:	90 40       	sbci	r25, 0x00	; 0
     e4e:	20 40       	sbci	r18, 0x00	; 0
     e50:	e1 f7       	brne	.-8      	; 0xe4a <funcStick+0x1b4>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <funcStick+0x1be>
     e54:	00 00       	nop
	}
	_delay_ms(100);
	LCD_Clear();
     e56:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
	
	
	height_stick = ultrasonic_stick();
     e5a:	0e 94 12 06 	call	0xc24	; 0xc24 <ultrasonic_stick>
     e5e:	60 93 42 02 	sts	0x0242, r22	; 0x800242 <height_stick>
     e62:	70 93 43 02 	sts	0x0243, r23	; 0x800243 <height_stick+0x1>
     e66:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <height_stick+0x2>
     e6a:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <height_stick+0x3>
     e6e:	4f ef       	ldi	r20, 0xFF	; 255
     e70:	51 ee       	ldi	r21, 0xE1	; 225
     e72:	84 e0       	ldi	r24, 0x04	; 4
     e74:	41 50       	subi	r20, 0x01	; 1
     e76:	50 40       	sbci	r21, 0x00	; 0
     e78:	80 40       	sbci	r24, 0x00	; 0
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <funcStick+0x1de>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <funcStick+0x1e8>
     e7e:	00 00       	nop
	_delay_ms(100);
	
	if( height_stick<= (stickStandards[intSportNo1-1][0]) - 0.010 ||  height_stick >= (stickStandards[intSportNo1-1][0]) + 0.010  )
     e80:	00 0f       	add	r16, r16
     e82:	11 1f       	adc	r17, r17
     e84:	00 0f       	add	r16, r16
     e86:	11 1f       	adc	r17, r17
     e88:	00 0f       	add	r16, r16
     e8a:	11 1f       	adc	r17, r17
     e8c:	f8 01       	movw	r30, r16
     e8e:	e0 5a       	subi	r30, 0xA0	; 160
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	80 80       	ld	r8, Z
     e94:	91 80       	ldd	r9, Z+1	; 0x01
     e96:	a2 80       	ldd	r10, Z+2	; 0x02
     e98:	b3 80       	ldd	r11, Z+3	; 0x03
     e9a:	2a e0       	ldi	r18, 0x0A	; 10
     e9c:	37 ed       	ldi	r19, 0xD7	; 215
     e9e:	43 e2       	ldi	r20, 0x23	; 35
     ea0:	5c e3       	ldi	r21, 0x3C	; 60
     ea2:	c5 01       	movw	r24, r10
     ea4:	b4 01       	movw	r22, r8
     ea6:	0e 94 ed 07 	call	0xfda	; 0xfda <__subsf3>
     eaa:	c0 90 42 02 	lds	r12, 0x0242	; 0x800242 <height_stick>
     eae:	d0 90 43 02 	lds	r13, 0x0243	; 0x800243 <height_stick+0x1>
     eb2:	e0 90 44 02 	lds	r14, 0x0244	; 0x800244 <height_stick+0x2>
     eb6:	f0 90 45 02 	lds	r15, 0x0245	; 0x800245 <height_stick+0x3>
     eba:	a7 01       	movw	r20, r14
     ebc:	96 01       	movw	r18, r12
     ebe:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     ec2:	88 23       	and	r24, r24
     ec4:	84 f4       	brge	.+32     	; 0xee6 <funcStick+0x250>
     ec6:	2a e0       	ldi	r18, 0x0A	; 10
     ec8:	37 ed       	ldi	r19, 0xD7	; 215
     eca:	43 e2       	ldi	r20, 0x23	; 35
     ecc:	5c e3       	ldi	r21, 0x3C	; 60
     ece:	c5 01       	movw	r24, r10
     ed0:	b4 01       	movw	r22, r8
     ed2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__addsf3>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	c7 01       	movw	r24, r14
     edc:	b6 01       	movw	r22, r12
     ede:	0e 94 b9 09 	call	0x1372	; 0x1372 <__gesf2>
     ee2:	88 23       	and	r24, r24
     ee4:	64 f0       	brlt	.+24     	; 0xefe <funcStick+0x268>
	{
		lcd_Print("Height test");
     ee6:	8c ef       	ldi	r24, 0xFC	; 252
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     eee:	80 ec       	ldi	r24, 0xC0	; 192
     ef0:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Fail!");
     ef4:	85 ed       	ldi	r24, 0xD5	; 213
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     efc:	0b c0       	rjmp	.+22     	; 0xf14 <funcStick+0x27e>
		
		} else {
		lcd_Print("Height test");
     efe:	8c ef       	ldi	r24, 0xFC	; 252
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     f06:	80 ec       	ldi	r24, 0xC0	; 192
     f08:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Pass!");
     f0c:	8b ed       	ldi	r24, 0xDB	; 219
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     f14:	9f ef       	ldi	r25, 0xFF	; 255
     f16:	21 ee       	ldi	r18, 0xE1	; 225
     f18:	44 e0       	ldi	r20, 0x04	; 4
     f1a:	91 50       	subi	r25, 0x01	; 1
     f1c:	20 40       	sbci	r18, 0x00	; 0
     f1e:	40 40       	sbci	r20, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <funcStick+0x284>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <funcStick+0x28e>
     f24:	00 00       	nop
	}
		_delay_ms(100);
		LCD_Clear();
     f26:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
		
}
     f2a:	6e 96       	adiw	r28, 0x1e	; 30
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	08 95       	ret

00000f50 <main>:
	return x;
}


int main()
{
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
	DDRA = 0; //port A as input
     f54:	1a ba       	out	0x1a, r1	; 26
	USART_Init(MYUBRR);
     f56:	87 e6       	ldi	r24, 0x67	; 103
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 49 00 	call	0x92	; 0x92 <USART_Init>
	DDRD|=(1<<Load_clk); //Load cell clock pin
     f5e:	81 b3       	in	r24, 0x11	; 17
     f60:	80 62       	ori	r24, 0x20	; 32
     f62:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<Load_clk);//Clock pin low
     f64:	82 b3       	in	r24, 0x12	; 18
     f66:	8f 7d       	andi	r24, 0xDF	; 223
     f68:	82 bb       	out	0x12, r24	; 18
	
	unsigned char typeChoice;
	unsigned char enter;
	
	do {
		DDRB =0x0F; // make PA0-PA3 (1)-->output and PA4-PA7 (0)-->input
     f6a:	8f e0       	ldi	r24, 0x0F	; 15
     f6c:	87 bb       	out	0x17, r24	; 23
		lcd_int();
     f6e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_int>
		
		lcd_Print("(1-Ball 2-Stick)");
     f72:	88 e0       	ldi	r24, 0x08	; 8
     f74:	92 e0       	ldi	r25, 0x02	; 2
     f76:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		lcdcmd(0xC0);
     f7a:	80 ec       	ldi	r24, 0xC0	; 192
     f7c:	0e 94 54 00 	call	0xa8	; 0xa8 <lcdcmd>
		lcd_Print("Select: ");
     f80:	89 e1       	ldi	r24, 0x19	; 25
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
		typeChoice =lcd_write();
     f88:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
     f8c:	d8 2f       	mov	r29, r24
		
		do {
			enter =lcd_write();
     f8e:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_write>
		} while (enter !='-');
     f92:	8d 32       	cpi	r24, 0x2D	; 45
     f94:	e1 f7       	brne	.-8      	; 0xf8e <main+0x3e>


		if (typeChoice =='1' || typeChoice =='2')
     f96:	cf ec       	ldi	r28, 0xCF	; 207
     f98:	cd 0f       	add	r28, r29
     f9a:	c2 30       	cpi	r28, 0x02	; 2
     f9c:	40 f4       	brcc	.+16     	; 0xfae <main+0x5e>
		{

			if (typeChoice=='1')
     f9e:	d1 33       	cpi	r29, 0x31	; 49
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <main+0x58>
			{
				funcBall();
     fa2:	0e 94 b3 03 	call	0x766	; 0x766 <funcBall>
     fa6:	12 c0       	rjmp	.+36     	; 0xfcc <main+0x7c>
				}else{
				funcStick();
     fa8:	0e 94 4b 06 	call	0xc96	; 0xc96 <funcStick>
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <main+0x7c>
			}
		}
		else
		{
			LCD_Clear();
     fae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Clear>
			lcd_Print("Wrong Input!");
     fb2:	82 e2       	ldi	r24, 0x22	; 34
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_Print>
     fba:	2f ef       	ldi	r18, 0xFF	; 255
     fbc:	80 e7       	ldi	r24, 0x70	; 112
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	21 50       	subi	r18, 0x01	; 1
     fc2:	80 40       	sbci	r24, 0x00	; 0
     fc4:	90 40       	sbci	r25, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <main+0x70>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <main+0x7a>
     fca:	00 00       	nop
			_delay_ms(50);
		}
	} while (typeChoice !='1' && typeChoice !='2');
     fcc:	c2 30       	cpi	r28, 0x02	; 2
     fce:	68 f6       	brcc	.-102    	; 0xf6a <main+0x1a>
	

	
	return 0;
}
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <__subsf3>:
     fda:	50 58       	subi	r21, 0x80	; 128

00000fdc <__addsf3>:
     fdc:	bb 27       	eor	r27, r27
     fde:	aa 27       	eor	r26, r26
     fe0:	0e 94 05 08 	call	0x100a	; 0x100a <__addsf3x>
     fe4:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_round>
     fe8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_pscA>
     fec:	38 f0       	brcs	.+14     	; 0xffc <__addsf3+0x20>
     fee:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_pscB>
     ff2:	20 f0       	brcs	.+8      	; 0xffc <__addsf3+0x20>
     ff4:	39 f4       	brne	.+14     	; 0x1004 <__addsf3+0x28>
     ff6:	9f 3f       	cpi	r25, 0xFF	; 255
     ff8:	19 f4       	brne	.+6      	; 0x1000 <__addsf3+0x24>
     ffa:	26 f4       	brtc	.+8      	; 0x1004 <__addsf3+0x28>
     ffc:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_nan>
    1000:	0e f4       	brtc	.+2      	; 0x1004 <__addsf3+0x28>
    1002:	e0 95       	com	r30
    1004:	e7 fb       	bst	r30, 7
    1006:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>

0000100a <__addsf3x>:
    100a:	e9 2f       	mov	r30, r25
    100c:	0e 94 90 09 	call	0x1320	; 0x1320 <__fp_split3>
    1010:	58 f3       	brcs	.-42     	; 0xfe8 <__addsf3+0xc>
    1012:	ba 17       	cp	r27, r26
    1014:	62 07       	cpc	r22, r18
    1016:	73 07       	cpc	r23, r19
    1018:	84 07       	cpc	r24, r20
    101a:	95 07       	cpc	r25, r21
    101c:	20 f0       	brcs	.+8      	; 0x1026 <__addsf3x+0x1c>
    101e:	79 f4       	brne	.+30     	; 0x103e <__addsf3x+0x34>
    1020:	a6 f5       	brtc	.+104    	; 0x108a <__addsf3x+0x80>
    1022:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_zero>
    1026:	0e f4       	brtc	.+2      	; 0x102a <__addsf3x+0x20>
    1028:	e0 95       	com	r30
    102a:	0b 2e       	mov	r0, r27
    102c:	ba 2f       	mov	r27, r26
    102e:	a0 2d       	mov	r26, r0
    1030:	0b 01       	movw	r0, r22
    1032:	b9 01       	movw	r22, r18
    1034:	90 01       	movw	r18, r0
    1036:	0c 01       	movw	r0, r24
    1038:	ca 01       	movw	r24, r20
    103a:	a0 01       	movw	r20, r0
    103c:	11 24       	eor	r1, r1
    103e:	ff 27       	eor	r31, r31
    1040:	59 1b       	sub	r21, r25
    1042:	99 f0       	breq	.+38     	; 0x106a <__addsf3x+0x60>
    1044:	59 3f       	cpi	r21, 0xF9	; 249
    1046:	50 f4       	brcc	.+20     	; 0x105c <__addsf3x+0x52>
    1048:	50 3e       	cpi	r21, 0xE0	; 224
    104a:	68 f1       	brcs	.+90     	; 0x10a6 <__addsf3x+0x9c>
    104c:	1a 16       	cp	r1, r26
    104e:	f0 40       	sbci	r31, 0x00	; 0
    1050:	a2 2f       	mov	r26, r18
    1052:	23 2f       	mov	r18, r19
    1054:	34 2f       	mov	r19, r20
    1056:	44 27       	eor	r20, r20
    1058:	58 5f       	subi	r21, 0xF8	; 248
    105a:	f3 cf       	rjmp	.-26     	; 0x1042 <__addsf3x+0x38>
    105c:	46 95       	lsr	r20
    105e:	37 95       	ror	r19
    1060:	27 95       	ror	r18
    1062:	a7 95       	ror	r26
    1064:	f0 40       	sbci	r31, 0x00	; 0
    1066:	53 95       	inc	r21
    1068:	c9 f7       	brne	.-14     	; 0x105c <__addsf3x+0x52>
    106a:	7e f4       	brtc	.+30     	; 0x108a <__addsf3x+0x80>
    106c:	1f 16       	cp	r1, r31
    106e:	ba 0b       	sbc	r27, r26
    1070:	62 0b       	sbc	r22, r18
    1072:	73 0b       	sbc	r23, r19
    1074:	84 0b       	sbc	r24, r20
    1076:	ba f0       	brmi	.+46     	; 0x10a6 <__addsf3x+0x9c>
    1078:	91 50       	subi	r25, 0x01	; 1
    107a:	a1 f0       	breq	.+40     	; 0x10a4 <__addsf3x+0x9a>
    107c:	ff 0f       	add	r31, r31
    107e:	bb 1f       	adc	r27, r27
    1080:	66 1f       	adc	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	c2 f7       	brpl	.-16     	; 0x1078 <__addsf3x+0x6e>
    1088:	0e c0       	rjmp	.+28     	; 0x10a6 <__addsf3x+0x9c>
    108a:	ba 0f       	add	r27, r26
    108c:	62 1f       	adc	r22, r18
    108e:	73 1f       	adc	r23, r19
    1090:	84 1f       	adc	r24, r20
    1092:	48 f4       	brcc	.+18     	; 0x10a6 <__addsf3x+0x9c>
    1094:	87 95       	ror	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f7 95       	ror	r31
    109e:	9e 3f       	cpi	r25, 0xFE	; 254
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <__addsf3x+0x9a>
    10a2:	b0 cf       	rjmp	.-160    	; 0x1004 <__addsf3+0x28>
    10a4:	93 95       	inc	r25
    10a6:	88 0f       	add	r24, r24
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <__addsf3x+0xa2>
    10aa:	99 27       	eor	r25, r25
    10ac:	ee 0f       	add	r30, r30
    10ae:	97 95       	ror	r25
    10b0:	87 95       	ror	r24
    10b2:	08 95       	ret

000010b4 <__cmpsf2>:
    10b4:	0e 94 44 09 	call	0x1288	; 0x1288 <__fp_cmp>
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <__cmpsf2+0x8>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	08 95       	ret

000010be <__divsf3>:
    10be:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__divsf3x>
    10c2:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_round>
    10c6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_pscB>
    10ca:	58 f0       	brcs	.+22     	; 0x10e2 <__divsf3+0x24>
    10cc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_pscA>
    10d0:	40 f0       	brcs	.+16     	; 0x10e2 <__divsf3+0x24>
    10d2:	29 f4       	brne	.+10     	; 0x10de <__divsf3+0x20>
    10d4:	5f 3f       	cpi	r21, 0xFF	; 255
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <__divsf3+0x24>
    10d8:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    10dc:	51 11       	cpse	r21, r1
    10de:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_szero>
    10e2:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_nan>

000010e6 <__divsf3x>:
    10e6:	0e 94 90 09 	call	0x1320	; 0x1320 <__fp_split3>
    10ea:	68 f3       	brcs	.-38     	; 0x10c6 <__divsf3+0x8>

000010ec <__divsf3_pse>:
    10ec:	99 23       	and	r25, r25
    10ee:	b1 f3       	breq	.-20     	; 0x10dc <__divsf3+0x1e>
    10f0:	55 23       	and	r21, r21
    10f2:	91 f3       	breq	.-28     	; 0x10d8 <__divsf3+0x1a>
    10f4:	95 1b       	sub	r25, r21
    10f6:	55 0b       	sbc	r21, r21
    10f8:	bb 27       	eor	r27, r27
    10fa:	aa 27       	eor	r26, r26
    10fc:	62 17       	cp	r22, r18
    10fe:	73 07       	cpc	r23, r19
    1100:	84 07       	cpc	r24, r20
    1102:	38 f0       	brcs	.+14     	; 0x1112 <__divsf3_pse+0x26>
    1104:	9f 5f       	subi	r25, 0xFF	; 255
    1106:	5f 4f       	sbci	r21, 0xFF	; 255
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	44 1f       	adc	r20, r20
    110e:	aa 1f       	adc	r26, r26
    1110:	a9 f3       	breq	.-22     	; 0x10fc <__divsf3_pse+0x10>
    1112:	35 d0       	rcall	.+106    	; 0x117e <__divsf3_pse+0x92>
    1114:	0e 2e       	mov	r0, r30
    1116:	3a f0       	brmi	.+14     	; 0x1126 <__divsf3_pse+0x3a>
    1118:	e0 e8       	ldi	r30, 0x80	; 128
    111a:	32 d0       	rcall	.+100    	; 0x1180 <__divsf3_pse+0x94>
    111c:	91 50       	subi	r25, 0x01	; 1
    111e:	50 40       	sbci	r21, 0x00	; 0
    1120:	e6 95       	lsr	r30
    1122:	00 1c       	adc	r0, r0
    1124:	ca f7       	brpl	.-14     	; 0x1118 <__divsf3_pse+0x2c>
    1126:	2b d0       	rcall	.+86     	; 0x117e <__divsf3_pse+0x92>
    1128:	fe 2f       	mov	r31, r30
    112a:	29 d0       	rcall	.+82     	; 0x117e <__divsf3_pse+0x92>
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	bb 1f       	adc	r27, r27
    1134:	26 17       	cp	r18, r22
    1136:	37 07       	cpc	r19, r23
    1138:	48 07       	cpc	r20, r24
    113a:	ab 07       	cpc	r26, r27
    113c:	b0 e8       	ldi	r27, 0x80	; 128
    113e:	09 f0       	breq	.+2      	; 0x1142 <__divsf3_pse+0x56>
    1140:	bb 0b       	sbc	r27, r27
    1142:	80 2d       	mov	r24, r0
    1144:	bf 01       	movw	r22, r30
    1146:	ff 27       	eor	r31, r31
    1148:	93 58       	subi	r25, 0x83	; 131
    114a:	5f 4f       	sbci	r21, 0xFF	; 255
    114c:	3a f0       	brmi	.+14     	; 0x115c <__divsf3_pse+0x70>
    114e:	9e 3f       	cpi	r25, 0xFE	; 254
    1150:	51 05       	cpc	r21, r1
    1152:	78 f0       	brcs	.+30     	; 0x1172 <__divsf3_pse+0x86>
    1154:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    1158:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_szero>
    115c:	5f 3f       	cpi	r21, 0xFF	; 255
    115e:	e4 f3       	brlt	.-8      	; 0x1158 <__divsf3_pse+0x6c>
    1160:	98 3e       	cpi	r25, 0xE8	; 232
    1162:	d4 f3       	brlt	.-12     	; 0x1158 <__divsf3_pse+0x6c>
    1164:	86 95       	lsr	r24
    1166:	77 95       	ror	r23
    1168:	67 95       	ror	r22
    116a:	b7 95       	ror	r27
    116c:	f7 95       	ror	r31
    116e:	9f 5f       	subi	r25, 0xFF	; 255
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__divsf3_pse+0x78>
    1172:	88 0f       	add	r24, r24
    1174:	91 1d       	adc	r25, r1
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret
    117e:	e1 e0       	ldi	r30, 0x01	; 1
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	88 1f       	adc	r24, r24
    1186:	bb 1f       	adc	r27, r27
    1188:	62 17       	cp	r22, r18
    118a:	73 07       	cpc	r23, r19
    118c:	84 07       	cpc	r24, r20
    118e:	ba 07       	cpc	r27, r26
    1190:	20 f0       	brcs	.+8      	; 0x119a <__divsf3_pse+0xae>
    1192:	62 1b       	sub	r22, r18
    1194:	73 0b       	sbc	r23, r19
    1196:	84 0b       	sbc	r24, r20
    1198:	ba 0b       	sbc	r27, r26
    119a:	ee 1f       	adc	r30, r30
    119c:	88 f7       	brcc	.-30     	; 0x1180 <__divsf3_pse+0x94>
    119e:	e0 95       	com	r30
    11a0:	08 95       	ret

000011a2 <__fixsfsi>:
    11a2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__fixunssfsi>
    11a6:	68 94       	set
    11a8:	b1 11       	cpse	r27, r1
    11aa:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_szero>
    11ae:	08 95       	ret

000011b0 <__fixunssfsi>:
    11b0:	0e 94 98 09 	call	0x1330	; 0x1330 <__fp_splitA>
    11b4:	88 f0       	brcs	.+34     	; 0x11d8 <__fixunssfsi+0x28>
    11b6:	9f 57       	subi	r25, 0x7F	; 127
    11b8:	98 f0       	brcs	.+38     	; 0x11e0 <__fixunssfsi+0x30>
    11ba:	b9 2f       	mov	r27, r25
    11bc:	99 27       	eor	r25, r25
    11be:	b7 51       	subi	r27, 0x17	; 23
    11c0:	b0 f0       	brcs	.+44     	; 0x11ee <__fixunssfsi+0x3e>
    11c2:	e1 f0       	breq	.+56     	; 0x11fc <__fixunssfsi+0x4c>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	1a f0       	brmi	.+6      	; 0x11d4 <__fixunssfsi+0x24>
    11ce:	ba 95       	dec	r27
    11d0:	c9 f7       	brne	.-14     	; 0x11c4 <__fixunssfsi+0x14>
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <__fixunssfsi+0x4c>
    11d4:	b1 30       	cpi	r27, 0x01	; 1
    11d6:	91 f0       	breq	.+36     	; 0x11fc <__fixunssfsi+0x4c>
    11d8:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_zero>
    11dc:	b1 e0       	ldi	r27, 0x01	; 1
    11de:	08 95       	ret
    11e0:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_zero>
    11e4:	67 2f       	mov	r22, r23
    11e6:	78 2f       	mov	r23, r24
    11e8:	88 27       	eor	r24, r24
    11ea:	b8 5f       	subi	r27, 0xF8	; 248
    11ec:	39 f0       	breq	.+14     	; 0x11fc <__fixunssfsi+0x4c>
    11ee:	b9 3f       	cpi	r27, 0xF9	; 249
    11f0:	cc f3       	brlt	.-14     	; 0x11e4 <__fixunssfsi+0x34>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b3 95       	inc	r27
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <__fixunssfsi+0x42>
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__fixunssfsi+0x5c>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	08 95       	ret

0000120e <__floatunsisf>:
    120e:	e8 94       	clt
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <__floatsisf+0x12>

00001212 <__floatsisf>:
    1212:	97 fb       	bst	r25, 7
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__floatsisf+0x12>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	99 23       	and	r25, r25
    1226:	a9 f0       	breq	.+42     	; 0x1252 <__floatsisf+0x40>
    1228:	f9 2f       	mov	r31, r25
    122a:	96 e9       	ldi	r25, 0x96	; 150
    122c:	bb 27       	eor	r27, r27
    122e:	93 95       	inc	r25
    1230:	f6 95       	lsr	r31
    1232:	87 95       	ror	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b7 95       	ror	r27
    123a:	f1 11       	cpse	r31, r1
    123c:	f8 cf       	rjmp	.-16     	; 0x122e <__floatsisf+0x1c>
    123e:	fa f4       	brpl	.+62     	; 0x127e <__floatsisf+0x6c>
    1240:	bb 0f       	add	r27, r27
    1242:	11 f4       	brne	.+4      	; 0x1248 <__floatsisf+0x36>
    1244:	60 ff       	sbrs	r22, 0
    1246:	1b c0       	rjmp	.+54     	; 0x127e <__floatsisf+0x6c>
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	16 c0       	rjmp	.+44     	; 0x127e <__floatsisf+0x6c>
    1252:	88 23       	and	r24, r24
    1254:	11 f0       	breq	.+4      	; 0x125a <__floatsisf+0x48>
    1256:	96 e9       	ldi	r25, 0x96	; 150
    1258:	11 c0       	rjmp	.+34     	; 0x127c <__floatsisf+0x6a>
    125a:	77 23       	and	r23, r23
    125c:	21 f0       	breq	.+8      	; 0x1266 <__floatsisf+0x54>
    125e:	9e e8       	ldi	r25, 0x8E	; 142
    1260:	87 2f       	mov	r24, r23
    1262:	76 2f       	mov	r23, r22
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <__floatsisf+0x5e>
    1266:	66 23       	and	r22, r22
    1268:	71 f0       	breq	.+28     	; 0x1286 <__floatsisf+0x74>
    126a:	96 e8       	ldi	r25, 0x86	; 134
    126c:	86 2f       	mov	r24, r22
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	2a f0       	brmi	.+10     	; 0x127e <__floatsisf+0x6c>
    1274:	9a 95       	dec	r25
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	da f7       	brpl	.-10     	; 0x1274 <__floatsisf+0x62>
    127e:	88 0f       	add	r24, r24
    1280:	96 95       	lsr	r25
    1282:	87 95       	ror	r24
    1284:	97 f9       	bld	r25, 7
    1286:	08 95       	ret

00001288 <__fp_cmp>:
    1288:	99 0f       	add	r25, r25
    128a:	00 08       	sbc	r0, r0
    128c:	55 0f       	add	r21, r21
    128e:	aa 0b       	sbc	r26, r26
    1290:	e0 e8       	ldi	r30, 0x80	; 128
    1292:	fe ef       	ldi	r31, 0xFE	; 254
    1294:	16 16       	cp	r1, r22
    1296:	17 06       	cpc	r1, r23
    1298:	e8 07       	cpc	r30, r24
    129a:	f9 07       	cpc	r31, r25
    129c:	c0 f0       	brcs	.+48     	; 0x12ce <__fp_cmp+0x46>
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	e4 07       	cpc	r30, r20
    12a4:	f5 07       	cpc	r31, r21
    12a6:	98 f0       	brcs	.+38     	; 0x12ce <__fp_cmp+0x46>
    12a8:	62 1b       	sub	r22, r18
    12aa:	73 0b       	sbc	r23, r19
    12ac:	84 0b       	sbc	r24, r20
    12ae:	95 0b       	sbc	r25, r21
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__fp_cmp+0x38>
    12b2:	0a 26       	eor	r0, r26
    12b4:	61 f0       	breq	.+24     	; 0x12ce <__fp_cmp+0x46>
    12b6:	23 2b       	or	r18, r19
    12b8:	24 2b       	or	r18, r20
    12ba:	25 2b       	or	r18, r21
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <__fp_cmp+0x3e>
    12be:	08 95       	ret
    12c0:	0a 26       	eor	r0, r26
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__fp_cmp+0x3e>
    12c4:	a1 40       	sbci	r26, 0x01	; 1
    12c6:	a6 95       	lsr	r26
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	81 1d       	adc	r24, r1
    12cc:	81 1d       	adc	r24, r1
    12ce:	08 95       	ret

000012d0 <__fp_inf>:
    12d0:	97 f9       	bld	r25, 7
    12d2:	9f 67       	ori	r25, 0x7F	; 127
    12d4:	80 e8       	ldi	r24, 0x80	; 128
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	08 95       	ret

000012dc <__fp_nan>:
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	80 ec       	ldi	r24, 0xC0	; 192
    12e0:	08 95       	ret

000012e2 <__fp_pscA>:
    12e2:	00 24       	eor	r0, r0
    12e4:	0a 94       	dec	r0
    12e6:	16 16       	cp	r1, r22
    12e8:	17 06       	cpc	r1, r23
    12ea:	18 06       	cpc	r1, r24
    12ec:	09 06       	cpc	r0, r25
    12ee:	08 95       	ret

000012f0 <__fp_pscB>:
    12f0:	00 24       	eor	r0, r0
    12f2:	0a 94       	dec	r0
    12f4:	12 16       	cp	r1, r18
    12f6:	13 06       	cpc	r1, r19
    12f8:	14 06       	cpc	r1, r20
    12fa:	05 06       	cpc	r0, r21
    12fc:	08 95       	ret

000012fe <__fp_round>:
    12fe:	09 2e       	mov	r0, r25
    1300:	03 94       	inc	r0
    1302:	00 0c       	add	r0, r0
    1304:	11 f4       	brne	.+4      	; 0x130a <__fp_round+0xc>
    1306:	88 23       	and	r24, r24
    1308:	52 f0       	brmi	.+20     	; 0x131e <__fp_round+0x20>
    130a:	bb 0f       	add	r27, r27
    130c:	40 f4       	brcc	.+16     	; 0x131e <__fp_round+0x20>
    130e:	bf 2b       	or	r27, r31
    1310:	11 f4       	brne	.+4      	; 0x1316 <__fp_round+0x18>
    1312:	60 ff       	sbrs	r22, 0
    1314:	04 c0       	rjmp	.+8      	; 0x131e <__fp_round+0x20>
    1316:	6f 5f       	subi	r22, 0xFF	; 255
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	08 95       	ret

00001320 <__fp_split3>:
    1320:	57 fd       	sbrc	r21, 7
    1322:	90 58       	subi	r25, 0x80	; 128
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	59 f0       	breq	.+22     	; 0x1340 <__fp_splitA+0x10>
    132a:	5f 3f       	cpi	r21, 0xFF	; 255
    132c:	71 f0       	breq	.+28     	; 0x134a <__fp_splitA+0x1a>
    132e:	47 95       	ror	r20

00001330 <__fp_splitA>:
    1330:	88 0f       	add	r24, r24
    1332:	97 fb       	bst	r25, 7
    1334:	99 1f       	adc	r25, r25
    1336:	61 f0       	breq	.+24     	; 0x1350 <__fp_splitA+0x20>
    1338:	9f 3f       	cpi	r25, 0xFF	; 255
    133a:	79 f0       	breq	.+30     	; 0x135a <__fp_splitA+0x2a>
    133c:	87 95       	ror	r24
    133e:	08 95       	ret
    1340:	12 16       	cp	r1, r18
    1342:	13 06       	cpc	r1, r19
    1344:	14 06       	cpc	r1, r20
    1346:	55 1f       	adc	r21, r21
    1348:	f2 cf       	rjmp	.-28     	; 0x132e <__fp_split3+0xe>
    134a:	46 95       	lsr	r20
    134c:	f1 df       	rcall	.-30     	; 0x1330 <__fp_splitA>
    134e:	08 c0       	rjmp	.+16     	; 0x1360 <__fp_splitA+0x30>
    1350:	16 16       	cp	r1, r22
    1352:	17 06       	cpc	r1, r23
    1354:	18 06       	cpc	r1, r24
    1356:	99 1f       	adc	r25, r25
    1358:	f1 cf       	rjmp	.-30     	; 0x133c <__fp_splitA+0xc>
    135a:	86 95       	lsr	r24
    135c:	71 05       	cpc	r23, r1
    135e:	61 05       	cpc	r22, r1
    1360:	08 94       	sec
    1362:	08 95       	ret

00001364 <__fp_zero>:
    1364:	e8 94       	clt

00001366 <__fp_szero>:
    1366:	bb 27       	eor	r27, r27
    1368:	66 27       	eor	r22, r22
    136a:	77 27       	eor	r23, r23
    136c:	cb 01       	movw	r24, r22
    136e:	97 f9       	bld	r25, 7
    1370:	08 95       	ret

00001372 <__gesf2>:
    1372:	0e 94 44 09 	call	0x1288	; 0x1288 <__fp_cmp>
    1376:	08 f4       	brcc	.+2      	; 0x137a <__gesf2+0x8>
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	08 95       	ret

0000137c <__mulsf3>:
    137c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__mulsf3x>
    1380:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_round>
    1384:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_pscA>
    1388:	38 f0       	brcs	.+14     	; 0x1398 <__mulsf3+0x1c>
    138a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_pscB>
    138e:	20 f0       	brcs	.+8      	; 0x1398 <__mulsf3+0x1c>
    1390:	95 23       	and	r25, r21
    1392:	11 f0       	breq	.+4      	; 0x1398 <__mulsf3+0x1c>
    1394:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    1398:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_nan>
    139c:	11 24       	eor	r1, r1
    139e:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_szero>

000013a2 <__mulsf3x>:
    13a2:	0e 94 90 09 	call	0x1320	; 0x1320 <__fp_split3>
    13a6:	70 f3       	brcs	.-36     	; 0x1384 <__mulsf3+0x8>

000013a8 <__mulsf3_pse>:
    13a8:	95 9f       	mul	r25, r21
    13aa:	c1 f3       	breq	.-16     	; 0x139c <__mulsf3+0x20>
    13ac:	95 0f       	add	r25, r21
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	55 1f       	adc	r21, r21
    13b2:	62 9f       	mul	r22, r18
    13b4:	f0 01       	movw	r30, r0
    13b6:	72 9f       	mul	r23, r18
    13b8:	bb 27       	eor	r27, r27
    13ba:	f0 0d       	add	r31, r0
    13bc:	b1 1d       	adc	r27, r1
    13be:	63 9f       	mul	r22, r19
    13c0:	aa 27       	eor	r26, r26
    13c2:	f0 0d       	add	r31, r0
    13c4:	b1 1d       	adc	r27, r1
    13c6:	aa 1f       	adc	r26, r26
    13c8:	64 9f       	mul	r22, r20
    13ca:	66 27       	eor	r22, r22
    13cc:	b0 0d       	add	r27, r0
    13ce:	a1 1d       	adc	r26, r1
    13d0:	66 1f       	adc	r22, r22
    13d2:	82 9f       	mul	r24, r18
    13d4:	22 27       	eor	r18, r18
    13d6:	b0 0d       	add	r27, r0
    13d8:	a1 1d       	adc	r26, r1
    13da:	62 1f       	adc	r22, r18
    13dc:	73 9f       	mul	r23, r19
    13de:	b0 0d       	add	r27, r0
    13e0:	a1 1d       	adc	r26, r1
    13e2:	62 1f       	adc	r22, r18
    13e4:	83 9f       	mul	r24, r19
    13e6:	a0 0d       	add	r26, r0
    13e8:	61 1d       	adc	r22, r1
    13ea:	22 1f       	adc	r18, r18
    13ec:	74 9f       	mul	r23, r20
    13ee:	33 27       	eor	r19, r19
    13f0:	a0 0d       	add	r26, r0
    13f2:	61 1d       	adc	r22, r1
    13f4:	23 1f       	adc	r18, r19
    13f6:	84 9f       	mul	r24, r20
    13f8:	60 0d       	add	r22, r0
    13fa:	21 1d       	adc	r18, r1
    13fc:	82 2f       	mov	r24, r18
    13fe:	76 2f       	mov	r23, r22
    1400:	6a 2f       	mov	r22, r26
    1402:	11 24       	eor	r1, r1
    1404:	9f 57       	subi	r25, 0x7F	; 127
    1406:	50 40       	sbci	r21, 0x00	; 0
    1408:	9a f0       	brmi	.+38     	; 0x1430 <__mulsf3_pse+0x88>
    140a:	f1 f0       	breq	.+60     	; 0x1448 <__mulsf3_pse+0xa0>
    140c:	88 23       	and	r24, r24
    140e:	4a f0       	brmi	.+18     	; 0x1422 <__mulsf3_pse+0x7a>
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	bb 1f       	adc	r27, r27
    1416:	66 1f       	adc	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	91 50       	subi	r25, 0x01	; 1
    141e:	50 40       	sbci	r21, 0x00	; 0
    1420:	a9 f7       	brne	.-22     	; 0x140c <__mulsf3_pse+0x64>
    1422:	9e 3f       	cpi	r25, 0xFE	; 254
    1424:	51 05       	cpc	r21, r1
    1426:	80 f0       	brcs	.+32     	; 0x1448 <__mulsf3_pse+0xa0>
    1428:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__fp_inf>
    142c:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__fp_szero>
    1430:	5f 3f       	cpi	r21, 0xFF	; 255
    1432:	e4 f3       	brlt	.-8      	; 0x142c <__mulsf3_pse+0x84>
    1434:	98 3e       	cpi	r25, 0xE8	; 232
    1436:	d4 f3       	brlt	.-12     	; 0x142c <__mulsf3_pse+0x84>
    1438:	86 95       	lsr	r24
    143a:	77 95       	ror	r23
    143c:	67 95       	ror	r22
    143e:	b7 95       	ror	r27
    1440:	f7 95       	ror	r31
    1442:	e7 95       	ror	r30
    1444:	9f 5f       	subi	r25, 0xFF	; 255
    1446:	c1 f7       	brne	.-16     	; 0x1438 <__mulsf3_pse+0x90>
    1448:	fe 2b       	or	r31, r30
    144a:	88 0f       	add	r24, r24
    144c:	91 1d       	adc	r25, r1
    144e:	96 95       	lsr	r25
    1450:	87 95       	ror	r24
    1452:	97 f9       	bld	r25, 7
    1454:	08 95       	ret

00001456 <__itoa_ncheck>:
    1456:	bb 27       	eor	r27, r27
    1458:	4a 30       	cpi	r20, 0x0A	; 10
    145a:	31 f4       	brne	.+12     	; 0x1468 <__itoa_ncheck+0x12>
    145c:	99 23       	and	r25, r25
    145e:	22 f4       	brpl	.+8      	; 0x1468 <__itoa_ncheck+0x12>
    1460:	bd e2       	ldi	r27, 0x2D	; 45
    1462:	90 95       	com	r25
    1464:	81 95       	neg	r24
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__utoa_common>

0000146c <__utoa_ncheck>:
    146c:	bb 27       	eor	r27, r27

0000146e <__utoa_common>:
    146e:	fb 01       	movw	r30, r22
    1470:	55 27       	eor	r21, r21
    1472:	aa 27       	eor	r26, r26
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	aa 1f       	adc	r26, r26
    147a:	a4 17       	cp	r26, r20
    147c:	10 f0       	brcs	.+4      	; 0x1482 <__utoa_common+0x14>
    147e:	a4 1b       	sub	r26, r20
    1480:	83 95       	inc	r24
    1482:	50 51       	subi	r21, 0x10	; 16
    1484:	b9 f7       	brne	.-18     	; 0x1474 <__utoa_common+0x6>
    1486:	a0 5d       	subi	r26, 0xD0	; 208
    1488:	aa 33       	cpi	r26, 0x3A	; 58
    148a:	08 f0       	brcs	.+2      	; 0x148e <__utoa_common+0x20>
    148c:	a9 5d       	subi	r26, 0xD9	; 217
    148e:	a1 93       	st	Z+, r26
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	79 f7       	brne	.-34     	; 0x1472 <__utoa_common+0x4>
    1494:	b1 11       	cpse	r27, r1
    1496:	b1 93       	st	Z+, r27
    1498:	11 92       	st	Z+, r1
    149a:	cb 01       	movw	r24, r22
    149c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <strrev>

000014a0 <strrev>:
    14a0:	dc 01       	movw	r26, r24
    14a2:	fc 01       	movw	r30, r24
    14a4:	67 2f       	mov	r22, r23
    14a6:	71 91       	ld	r23, Z+
    14a8:	77 23       	and	r23, r23
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <strrev+0x4>
    14ac:	32 97       	sbiw	r30, 0x02	; 2
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <strrev+0x18>
    14b0:	7c 91       	ld	r23, X
    14b2:	6d 93       	st	X+, r22
    14b4:	70 83       	st	Z, r23
    14b6:	62 91       	ld	r22, -Z
    14b8:	ae 17       	cp	r26, r30
    14ba:	bf 07       	cpc	r27, r31
    14bc:	c8 f3       	brcs	.-14     	; 0x14b0 <strrev+0x10>
    14be:	08 95       	ret

000014c0 <_exit>:
    14c0:	f8 94       	cli

000014c2 <__stop_program>:
    14c2:	ff cf       	rjmp	.-2      	; 0x14c2 <__stop_program>
